type Account {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  balanceMethod: String

  """Internal ID, auto incrementing"""
  balanceAttributeId: BigInt
  balancePointAveragingInterval: Interval
  balanceConversionOffset: Float
  balanceConversionFactor: Float
  emptyLevel: Float
  fullLevel: Float
  influenceRatioLimit: Float
  thresholdLimit: Float

  """Internal ID, auto incrementing"""
  measurementUnitId: BigInt
  keyAttributes: [BigInt]
  processStartId: BigInt
  baseMaterialTypeIds: [BigInt]

  """Reads a single `Object` that is related to this `Account`."""
  onObject: Object

  """Reads a single `Equipment` that is related to this `Account`."""
  onEquipment: Equipment

  """Reads a single `Place` that is related to this `Account`."""
  onPlace: Place

  """Reads a single `Organization` that is related to this `Account`."""
  onOrganization: Organization

  """Reads a single `Attribute` that is related to this `Account`."""
  balanceAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Account`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `Account`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Account`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Account`."""
  partOf: Thing

  """Reads and enables pagination through a set of `LedgerEntry`."""
  ledgerEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LedgerEntry`."""
    orderBy: [LedgerEntriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LedgerEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LedgerEntryFilter
  ): [LedgerEntry!]!
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `balanceMethod` field."""
  balanceMethod: String

  """Checks for equality with the object’s `balanceAttributeId` field."""
  balanceAttributeId: BigInt

  """
  Checks for equality with the object’s `balancePointAveragingInterval` field.
  """
  balancePointAveragingInterval: IntervalInput

  """Checks for equality with the object’s `balanceConversionOffset` field."""
  balanceConversionOffset: Float

  """Checks for equality with the object’s `balanceConversionFactor` field."""
  balanceConversionFactor: Float

  """Checks for equality with the object’s `emptyLevel` field."""
  emptyLevel: Float

  """Checks for equality with the object’s `fullLevel` field."""
  fullLevel: Float

  """Checks for equality with the object’s `influenceRatioLimit` field."""
  influenceRatioLimit: Float

  """Checks for equality with the object’s `thresholdLimit` field."""
  thresholdLimit: Float

  """Checks for equality with the object’s `measurementUnitId` field."""
  measurementUnitId: BigInt

  """Checks for equality with the object’s `keyAttributes` field."""
  keyAttributes: [BigInt]

  """Checks for equality with the object’s `processStartId` field."""
  processStartId: BigInt

  """Checks for equality with the object’s `baseMaterialTypeIds` field."""
  baseMaterialTypeIds: [BigInt]
}

"""
A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’
"""
input AccountFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `balanceMethod` field."""
  balanceMethod: StringFilter

  """Filter by the object’s `balanceAttributeId` field."""
  balanceAttributeId: BigIntFilter

  """Filter by the object’s `balancePointAveragingInterval` field."""
  balancePointAveragingInterval: IntervalFilter

  """Filter by the object’s `balanceConversionOffset` field."""
  balanceConversionOffset: FloatFilter

  """Filter by the object’s `balanceConversionFactor` field."""
  balanceConversionFactor: FloatFilter

  """Filter by the object’s `emptyLevel` field."""
  emptyLevel: FloatFilter

  """Filter by the object’s `fullLevel` field."""
  fullLevel: FloatFilter

  """Filter by the object’s `influenceRatioLimit` field."""
  influenceRatioLimit: FloatFilter

  """Filter by the object’s `thresholdLimit` field."""
  thresholdLimit: FloatFilter

  """Filter by the object’s `measurementUnitId` field."""
  measurementUnitId: BigIntFilter

  """Filter by the object’s `keyAttributes` field."""
  keyAttributes: BigIntListFilter

  """Filter by the object’s `processStartId` field."""
  processStartId: BigIntFilter

  """Filter by the object’s `baseMaterialTypeIds` field."""
  baseMaterialTypeIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [AccountFilter!]

  """Checks for any expressions in this list."""
  or: [AccountFilter!]

  """Negates the expression."""
  not: AccountFilter
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  balanceMethod: String

  """Internal ID, auto incrementing"""
  balanceAttributeId: BigInt
  balancePointAveragingInterval: IntervalInput
  balanceConversionOffset: Float
  balanceConversionFactor: Float
  emptyLevel: Float
  fullLevel: Float
  influenceRatioLimit: Float
  thresholdLimit: Float

  """Internal ID, auto incrementing"""
  measurementUnitId: BigInt
  keyAttributes: [BigInt]
  processStartId: BigInt
  baseMaterialTypeIds: [BigInt]
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  balanceMethod: String

  """Internal ID, auto incrementing"""
  balanceAttributeId: BigInt
  balancePointAveragingInterval: IntervalInput
  balanceConversionOffset: Float
  balanceConversionFactor: Float
  emptyLevel: Float
  fullLevel: Float
  influenceRatioLimit: Float
  thresholdLimit: Float

  """Internal ID, auto incrementing"""
  measurementUnitId: BigInt
  keyAttributes: [BigInt]
  processStartId: BigInt
  baseMaterialTypeIds: [BigInt]
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  BALANCE_METHOD_ASC
  BALANCE_METHOD_DESC
  BALANCE_ATTRIBUTE_ID_ASC
  BALANCE_ATTRIBUTE_ID_DESC
  BALANCE_POINT_AVERAGING_INTERVAL_ASC
  BALANCE_POINT_AVERAGING_INTERVAL_DESC
  BALANCE_CONVERSION_OFFSET_ASC
  BALANCE_CONVERSION_OFFSET_DESC
  BALANCE_CONVERSION_FACTOR_ASC
  BALANCE_CONVERSION_FACTOR_DESC
  EMPTY_LEVEL_ASC
  EMPTY_LEVEL_DESC
  FULL_LEVEL_ASC
  FULL_LEVEL_DESC
  INFLUENCE_RATIO_LIMIT_ASC
  INFLUENCE_RATIO_LIMIT_DESC
  THRESHOLD_LIMIT_ASC
  THRESHOLD_LIMIT_DESC
  MEASUREMENT_UNIT_ID_ASC
  MEASUREMENT_UNIT_ID_DESC
  KEY_ATTRIBUTES_ASC
  KEY_ATTRIBUTES_DESC
  PROCESS_START_ID_ASC
  PROCESS_START_ID_DESC
  BASE_MATERIAL_TYPE_IDS_ASC
  BASE_MATERIAL_TYPE_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Attribute {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  tagId: BigInt

  """The measurement unit for the attribute."""
  measurementUnitId: BigInt

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  boolValue: Boolean
  intValue: BigInt
  floatValue: Float
  stringValue: String
  datetimeValue: Datetime
  intervalValue: Interval

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  typeToAttributeTypeId: BigInt

  """Internal ID, auto incrementing"""
  quantityId: BigInt
  dataSource: DataSourceEnum
  distinctlyMeasured: Boolean

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attribute based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: Interval
  maxLatencyInterval: Interval
  unlinkRelativeName: Boolean
  objectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  enumerationValue: String
  enumerationName: String
  geopointValue: String

  """Internal ID, auto incrementing"""
  referencedNodeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  accessGroupIds: [BigInt]

  """Reads a single `CurrentValue` that is related to this `Attribute`."""
  currentValue: CurrentValue

  """Reads a single `Attribute` that is related to this `Attribute`."""
  referencedByAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Attribute`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Equipment` that is related to this `Attribute`."""
  onEquipment: Equipment

  """Reads a single `Object` that is related to this `Attribute`."""
  onObject: Object

  """Reads a single `Organization` that is related to this `Attribute`."""
  onOrganization: Organization

  """Reads a single `Place` that is related to this `Attribute`."""
  onPlace: Place

  """Reads a single `Thing` that is related to this `Attribute`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Attribute`."""
  attributeType: Thing

  """Reads a single `EnumerationType` that is related to this `Attribute`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Attribute`."""
  tag: Thing

  """Reads a single `Quantity` that is related to this `Attribute`."""
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `Attribute`.
  """
  typeToAttributeType: TypeToAttributeType

  """Reads a single `TiqType` that is related to this `Attribute`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Attribute`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accountsByBalanceAttributeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `AttributeLimit`."""
  limits(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AttributeLimit`."""
    orderBy: [AttributeLimitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeLimitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeLimitFilter
  ): [AttributeLimit!]!

  """Reads a single `Attribute` that is related to this `Attribute`."""
  referencedAttribute: Attribute

  """Reads a single `Object` that is related to this `Attribute`."""
  referencedObject: Object
  getTimeSeries(
    startTime: Datetime
    endTime: Datetime
    maxSamples: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributesGetTimeSeriesRecordFilter
  ): [AttributesGetTimeSeriesRecord]
}

"""
A condition to be used against `Attribute` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttributeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `tagId` field."""
  tagId: BigInt

  """Checks for equality with the object’s `measurementUnitId` field."""
  measurementUnitId: BigInt

  """Checks for equality with the object’s `attributeTypeId` field."""
  attributeTypeId: BigInt

  """Checks for equality with the object’s `boolValue` field."""
  boolValue: Boolean

  """Checks for equality with the object’s `intValue` field."""
  intValue: BigInt

  """Checks for equality with the object’s `floatValue` field."""
  floatValue: Float

  """Checks for equality with the object’s `stringValue` field."""
  stringValue: String

  """Checks for equality with the object’s `datetimeValue` field."""
  datetimeValue: Datetime

  """Checks for equality with the object’s `intervalValue` field."""
  intervalValue: IntervalInput

  """Checks for equality with the object’s `dataType` field."""
  dataType: ScalarTypeEnum

  """Checks for equality with the object’s `typeToAttributeTypeId` field."""
  typeToAttributeTypeId: BigInt

  """Checks for equality with the object’s `quantityId` field."""
  quantityId: BigInt

  """Checks for equality with the object’s `dataSource` field."""
  dataSource: DataSourceEnum

  """Checks for equality with the object’s `distinctlyMeasured` field."""
  distinctlyMeasured: Boolean

  """Checks for equality with the object’s `interpolationMethod` field."""
  interpolationMethod: InterpolationMethodEnum

  """Checks for equality with the object’s `expression` field."""
  expression: String

  """Checks for equality with the object’s `minValue` field."""
  minValue: Float

  """Checks for equality with the object’s `maxValue` field."""
  maxValue: Float

  """Checks for equality with the object’s `decimalPlaces` field."""
  decimalPlaces: Int

  """Checks for equality with the object’s `isHidden` field."""
  isHidden: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `expirationInterval` field."""
  expirationInterval: IntervalInput

  """Checks for equality with the object’s `maxLatencyInterval` field."""
  maxLatencyInterval: IntervalInput

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `objectValue` field."""
  objectValue: JSON

  """Checks for equality with the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigInt

  """Checks for equality with the object’s `enumerationValues` field."""
  enumerationValues: [String]

  """Checks for equality with the object’s `enumerationValue` field."""
  enumerationValue: String

  """Checks for equality with the object’s `enumerationName` field."""
  enumerationName: String

  """Checks for equality with the object’s `geopointValue` field."""
  geopointValue: String

  """Checks for equality with the object’s `referencedNodeId` field."""
  referencedNodeId: BigInt

  """Checks for equality with the object’s `icon` field."""
  icon: String

  """Checks for equality with the object’s `objectHistoryTypeId` field."""
  objectHistoryTypeId: BigInt

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Attribute` object types. All fields are combined with a logical ‘and.’
"""
input AttributeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `tagId` field."""
  tagId: BigIntFilter

  """Filter by the object’s `measurementUnitId` field."""
  measurementUnitId: BigIntFilter

  """Filter by the object’s `attributeTypeId` field."""
  attributeTypeId: BigIntFilter

  """Filter by the object’s `boolValue` field."""
  boolValue: BooleanFilter

  """Filter by the object’s `intValue` field."""
  intValue: BigIntFilter

  """Filter by the object’s `floatValue` field."""
  floatValue: FloatFilter

  """Filter by the object’s `stringValue` field."""
  stringValue: StringFilter

  """Filter by the object’s `datetimeValue` field."""
  datetimeValue: DatetimeFilter

  """Filter by the object’s `intervalValue` field."""
  intervalValue: IntervalFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Filter by the object’s `typeToAttributeTypeId` field."""
  typeToAttributeTypeId: BigIntFilter

  """Filter by the object’s `quantityId` field."""
  quantityId: BigIntFilter

  """Filter by the object’s `dataSource` field."""
  dataSource: DataSourceEnumFilter

  """Filter by the object’s `distinctlyMeasured` field."""
  distinctlyMeasured: BooleanFilter

  """Filter by the object’s `interpolationMethod` field."""
  interpolationMethod: InterpolationMethodEnumFilter

  """Filter by the object’s `expression` field."""
  expression: StringFilter

  """Filter by the object’s `minValue` field."""
  minValue: FloatFilter

  """Filter by the object’s `maxValue` field."""
  maxValue: FloatFilter

  """Filter by the object’s `decimalPlaces` field."""
  decimalPlaces: IntFilter

  """Filter by the object’s `isHidden` field."""
  isHidden: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `expirationInterval` field."""
  expirationInterval: IntervalFilter

  """Filter by the object’s `maxLatencyInterval` field."""
  maxLatencyInterval: IntervalFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `objectValue` field."""
  objectValue: JSONFilter

  """Filter by the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigIntFilter

  """Filter by the object’s `enumerationValues` field."""
  enumerationValues: StringListFilter

  """Filter by the object’s `enumerationValue` field."""
  enumerationValue: StringFilter

  """Filter by the object’s `enumerationName` field."""
  enumerationName: StringFilter

  """Filter by the object’s `referencedNodeId` field."""
  referencedNodeId: BigIntFilter

  """Filter by the object’s `icon` field."""
  icon: StringFilter

  """Filter by the object’s `objectHistoryTypeId` field."""
  objectHistoryTypeId: BigIntFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [AttributeFilter!]

  """Checks for any expressions in this list."""
  or: [AttributeFilter!]

  """Negates the expression."""
  not: AttributeFilter
}

"""An input for mutations affecting `Attribute`"""
input AttributeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  tagId: BigInt

  """The measurement unit for the attribute."""
  measurementUnitId: BigInt

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  boolValue: Boolean
  intValue: BigInt
  floatValue: Float
  stringValue: String
  datetimeValue: Datetime
  intervalValue: IntervalInput

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  typeToAttributeTypeId: BigInt

  """Internal ID, auto incrementing"""
  quantityId: BigInt
  dataSource: DataSourceEnum
  distinctlyMeasured: Boolean

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attribute based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: IntervalInput
  maxLatencyInterval: IntervalInput
  unlinkRelativeName: Boolean
  objectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  enumerationValue: String
  enumerationName: String
  geopointValue: String

  """Internal ID, auto incrementing"""
  referencedNodeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  accessGroupIds: [BigInt]
}

type AttributeLimit {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  direction: LimitDirectionEnum

  """Internal ID, auto incrementing"""
  tagId: BigInt
  floatValue: Float
  deadbandDetectTime: Float
  deadbandReturnValue: Float
  dataSource: DataSourceEnum
  priority: Int
  message: String

  """
  This will store the base attribute limit id (of type_to_attribute_type) from where this attribute limit has been derived.
  """
  baseAttributeLimitId: BigInt

  """Reads a single `Attribute` that is related to this `AttributeLimit`."""
  onAttribute: Attribute

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  tag: Thing

  """Reads a single `TiqType` that is related to this `AttributeLimit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  partOf: Thing
}

"""
A condition to be used against `AttributeLimit` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AttributeLimitCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `direction` field."""
  direction: LimitDirectionEnum

  """Checks for equality with the object’s `tagId` field."""
  tagId: BigInt

  """Checks for equality with the object’s `floatValue` field."""
  floatValue: Float

  """Checks for equality with the object’s `deadbandDetectTime` field."""
  deadbandDetectTime: Float

  """Checks for equality with the object’s `deadbandReturnValue` field."""
  deadbandReturnValue: Float

  """Checks for equality with the object’s `dataSource` field."""
  dataSource: DataSourceEnum

  """Checks for equality with the object’s `priority` field."""
  priority: Int

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `baseAttributeLimitId` field."""
  baseAttributeLimitId: BigInt
}

"""
A filter to be used against `AttributeLimit` object types. All fields are combined with a logical ‘and.’
"""
input AttributeLimitFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `direction` field."""
  direction: LimitDirectionEnumFilter

  """Filter by the object’s `tagId` field."""
  tagId: BigIntFilter

  """Filter by the object’s `floatValue` field."""
  floatValue: FloatFilter

  """Filter by the object’s `deadbandDetectTime` field."""
  deadbandDetectTime: FloatFilter

  """Filter by the object’s `deadbandReturnValue` field."""
  deadbandReturnValue: FloatFilter

  """Filter by the object’s `dataSource` field."""
  dataSource: DataSourceEnumFilter

  """Filter by the object’s `priority` field."""
  priority: IntFilter

  """Filter by the object’s `message` field."""
  message: StringFilter

  """Filter by the object’s `baseAttributeLimitId` field."""
  baseAttributeLimitId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [AttributeLimitFilter!]

  """Checks for any expressions in this list."""
  or: [AttributeLimitFilter!]

  """Negates the expression."""
  not: AttributeLimitFilter
}

"""An input for mutations affecting `AttributeLimit`"""
input AttributeLimitInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  direction: LimitDirectionEnum

  """Internal ID, auto incrementing"""
  tagId: BigInt
  floatValue: Float
  deadbandDetectTime: Float
  deadbandReturnValue: Float
  dataSource: DataSourceEnum
  priority: Int
  message: String

  """
  This will store the base attribute limit id (of type_to_attribute_type) from where this attribute limit has been derived.
  """
  baseAttributeLimitId: BigInt
}

"""
Represents an update to a `AttributeLimit`. Fields that are set will be updated.
"""
input AttributeLimitPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  direction: LimitDirectionEnum

  """Internal ID, auto incrementing"""
  tagId: BigInt
  floatValue: Float
  deadbandDetectTime: Float
  deadbandReturnValue: Float
  dataSource: DataSourceEnum
  priority: Int
  message: String

  """
  This will store the base attribute limit id (of type_to_attribute_type) from where this attribute limit has been derived.
  """
  baseAttributeLimitId: BigInt
}

"""Methods to use when ordering `AttributeLimit`."""
enum AttributeLimitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  FLOAT_VALUE_ASC
  FLOAT_VALUE_DESC
  DEADBAND_DETECT_TIME_ASC
  DEADBAND_DETECT_TIME_DESC
  DEADBAND_RETURN_VALUE_ASC
  DEADBAND_RETURN_VALUE_DESC
  DATA_SOURCE_ASC
  DATA_SOURCE_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  BASE_ATTRIBUTE_LIMIT_ID_ASC
  BASE_ATTRIBUTE_LIMIT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Attribute`. Fields that are set will be updated.
"""
input AttributePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  tagId: BigInt

  """The measurement unit for the attribute."""
  measurementUnitId: BigInt

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  boolValue: Boolean
  intValue: BigInt
  floatValue: Float
  stringValue: String
  datetimeValue: Datetime
  intervalValue: IntervalInput

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  typeToAttributeTypeId: BigInt

  """Internal ID, auto incrementing"""
  quantityId: BigInt
  dataSource: DataSourceEnum
  distinctlyMeasured: Boolean

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attribute based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: IntervalInput
  maxLatencyInterval: IntervalInput
  unlinkRelativeName: Boolean
  objectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  enumerationValue: String
  enumerationName: String
  geopointValue: String

  """Internal ID, auto incrementing"""
  referencedNodeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  accessGroupIds: [BigInt]
}

"""The return type of our `getTimeSeriesConnection` query."""
type AttributesGetTimeSeriesRecord {
  id: BigInt
  status: BigInt
  ts: Datetime
  intvalue: BigInt
  boolvalue: Boolean
  floatvalue: Float
  stringvalue: String
  datetimevalue: Datetime
  intervalvalue: Interval
  objectvalue: JSON
  enumerationvalue: String
  dataType: ScalarTypeEnum
}

"""
A filter to be used against `AttributesGetTimeSeriesRecord` object types. All fields are combined with a logical ‘and.’
"""
input AttributesGetTimeSeriesRecordFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `status` field."""
  status: BigIntFilter

  """Filter by the object’s `ts` field."""
  ts: DatetimeFilter

  """Filter by the object’s `intvalue` field."""
  intvalue: BigIntFilter

  """Filter by the object’s `boolvalue` field."""
  boolvalue: BooleanFilter

  """Filter by the object’s `floatvalue` field."""
  floatvalue: FloatFilter

  """Filter by the object’s `stringvalue` field."""
  stringvalue: StringFilter

  """Filter by the object’s `datetimevalue` field."""
  datetimevalue: DatetimeFilter

  """Filter by the object’s `intervalvalue` field."""
  intervalvalue: IntervalFilter

  """Filter by the object’s `objectvalue` field."""
  objectvalue: JSONFilter

  """Filter by the object’s `enumerationvalue` field."""
  enumerationvalue: StringFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Checks for all expressions in this list."""
  and: [AttributesGetTimeSeriesRecordFilter!]

  """Checks for any expressions in this list."""
  or: [AttributesGetTimeSeriesRecordFilter!]

  """Negates the expression."""
  not: AttributesGetTimeSeriesRecordFilter
}

"""Methods to use when ordering `Attribute`."""
enum AttributesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  MEASUREMENT_UNIT_ID_ASC
  MEASUREMENT_UNIT_ID_DESC
  ATTRIBUTE_TYPE_ID_ASC
  ATTRIBUTE_TYPE_ID_DESC
  BOOL_VALUE_ASC
  BOOL_VALUE_DESC
  INT_VALUE_ASC
  INT_VALUE_DESC
  FLOAT_VALUE_ASC
  FLOAT_VALUE_DESC
  STRING_VALUE_ASC
  STRING_VALUE_DESC
  DATETIME_VALUE_ASC
  DATETIME_VALUE_DESC
  INTERVAL_VALUE_ASC
  INTERVAL_VALUE_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  TYPE_TO_ATTRIBUTE_TYPE_ID_ASC
  TYPE_TO_ATTRIBUTE_TYPE_ID_DESC
  QUANTITY_ID_ASC
  QUANTITY_ID_DESC
  DATA_SOURCE_ASC
  DATA_SOURCE_DESC
  DISTINCTLY_MEASURED_ASC
  DISTINCTLY_MEASURED_DESC
  INTERPOLATION_METHOD_ASC
  INTERPOLATION_METHOD_DESC
  EXPRESSION_ASC
  EXPRESSION_DESC
  MIN_VALUE_ASC
  MIN_VALUE_DESC
  MAX_VALUE_ASC
  MAX_VALUE_DESC
  DECIMAL_PLACES_ASC
  DECIMAL_PLACES_DESC
  IS_HIDDEN_ASC
  IS_HIDDEN_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  EXPIRATION_INTERVAL_ASC
  EXPIRATION_INTERVAL_DESC
  MAX_LATENCY_INTERVAL_ASC
  MAX_LATENCY_INTERVAL_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  OBJECT_VALUE_ASC
  OBJECT_VALUE_DESC
  ENUMERATION_TYPE_ID_ASC
  ENUMERATION_TYPE_ID_DESC
  ENUMERATION_VALUES_ASC
  ENUMERATION_VALUES_DESC
  ENUMERATION_VALUE_ASC
  ENUMERATION_VALUE_DESC
  ENUMERATION_NAME_ASC
  ENUMERATION_NAME_DESC
  GEOPOINT_VALUE_ASC
  GEOPOINT_VALUE_DESC
  REFERENCED_NODE_ID_ASC
  REFERENCED_NODE_ID_DESC
  ICON_ASC
  ICON_DESC
  OBJECT_HISTORY_TYPE_ID_ASC
  OBJECT_HISTORY_TYPE_ID_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `authenticationRequest` mutation."""
input AuthenticationRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  authenticator: String
  role: String
  userName: String
}

"""The output of our `authenticationRequest` mutation."""
type AuthenticationRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtRequest: JwtRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `authenticationValidation` mutation."""
input AuthenticationValidationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  authenticator: String
  signedChallenge: String
}

"""The output of our `authenticationValidation` mutation."""
type AuthenticationValidationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtClaim: JwtClaim

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against BigInt List fields. All fields are combined with a logical ‘and.’
"""
input BigIntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [BigInt]

  """Not equal to the specified value."""
  notEqualTo: [BigInt]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [BigInt]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [BigInt]

  """Less than the specified value."""
  lessThan: [BigInt]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [BigInt]

  """Greater than the specified value."""
  greaterThan: [BigInt]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [BigInt]

  """Contains the specified list of values."""
  contains: [BigInt]

  """Contained by the specified list of values."""
  containedBy: [BigInt]

  """Overlaps the specified list of values."""
  overlaps: [BigInt]

  """Any array item is equal to the specified value."""
  anyEqualTo: BigInt

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: BigInt

  """Any array item is less than the specified value."""
  anyLessThan: BigInt

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: BigInt

  """Any array item is greater than the specified value."""
  anyGreaterThan: BigInt

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: BigInt
}

"""A string representing a series of binary bits"""
scalar BitString

"""
A filter to be used against BitString fields. All fields are combined with a logical ‘and.’
"""
input BitStringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BitString

  """Not equal to the specified value."""
  notEqualTo: BitString

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BitString

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BitString

  """Included in the specified list."""
  in: [BitString!]

  """Not included in the specified list."""
  notIn: [BitString!]

  """Less than the specified value."""
  lessThan: BitString

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BitString

  """Greater than the specified value."""
  greaterThan: BitString

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BitString
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
This view contains all the information required to configure the connector, both
in the cloud and on premise. Node information is propagated to the nodes table.
"""
type Connector {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """The version of the connector that is installed."""
  version: String

  """The south service configuration."""
  southServiceConfig: JSON

  """The north service configuration."""
  northServiceConfig: JSON

  """The system monitor service configuration."""
  systemMonitorConfig: JSON

  """The operating system that this connector is installed on."""
  operatingSystem: String
  installStatus: InstallStatusEnum
  dataReceiptDelay: Interval

  """The source host the connector connects to."""
  host: String

  """The namespace URIs of an OPC UA host."""
  opcuaNamespaceUris: JSON
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Thing` that is related to this `Connector`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Connector`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Connector`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]!
}

"""
A condition to be used against `Connector` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ConnectorCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `southServiceConfig` field."""
  southServiceConfig: JSON

  """Checks for equality with the object’s `northServiceConfig` field."""
  northServiceConfig: JSON

  """Checks for equality with the object’s `systemMonitorConfig` field."""
  systemMonitorConfig: JSON

  """Checks for equality with the object’s `operatingSystem` field."""
  operatingSystem: String

  """Checks for equality with the object’s `installStatus` field."""
  installStatus: InstallStatusEnum

  """Checks for equality with the object’s `dataReceiptDelay` field."""
  dataReceiptDelay: IntervalInput

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `opcuaNamespaceUris` field."""
  opcuaNamespaceUris: JSON

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Connector` object types. All fields are combined with a logical ‘and.’
"""
input ConnectorFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `southServiceConfig` field."""
  southServiceConfig: JSONFilter

  """Filter by the object’s `northServiceConfig` field."""
  northServiceConfig: JSONFilter

  """Filter by the object’s `systemMonitorConfig` field."""
  systemMonitorConfig: JSONFilter

  """Filter by the object’s `operatingSystem` field."""
  operatingSystem: StringFilter

  """Filter by the object’s `installStatus` field."""
  installStatus: InstallStatusEnumFilter

  """Filter by the object’s `dataReceiptDelay` field."""
  dataReceiptDelay: IntervalFilter

  """Filter by the object’s `host` field."""
  host: StringFilter

  """Filter by the object’s `opcuaNamespaceUris` field."""
  opcuaNamespaceUris: JSONFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [ConnectorFilter!]

  """Checks for any expressions in this list."""
  or: [ConnectorFilter!]

  """Negates the expression."""
  not: ConnectorFilter
}

"""An input for mutations affecting `Connector`"""
input ConnectorInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """The version of the connector that is installed."""
  version: String

  """The south service configuration."""
  southServiceConfig: JSON

  """The north service configuration."""
  northServiceConfig: JSON

  """The system monitor service configuration."""
  systemMonitorConfig: JSON

  """The operating system that this connector is installed on."""
  operatingSystem: String
  installStatus: InstallStatusEnum
  dataReceiptDelay: IntervalInput

  """The source host the connector connects to."""
  host: String

  """The namespace URIs of an OPC UA host."""
  opcuaNamespaceUris: JSON
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Connector`. Fields that are set will be updated.
"""
input ConnectorPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """The version of the connector that is installed."""
  version: String

  """The south service configuration."""
  southServiceConfig: JSON

  """The north service configuration."""
  northServiceConfig: JSON

  """The system monitor service configuration."""
  systemMonitorConfig: JSON

  """The operating system that this connector is installed on."""
  operatingSystem: String
  installStatus: InstallStatusEnum
  dataReceiptDelay: IntervalInput

  """The source host the connector connects to."""
  host: String

  """The namespace URIs of an OPC UA host."""
  opcuaNamespaceUris: JSON
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Connector`."""
enum ConnectorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  VERSION_ASC
  VERSION_DESC
  SOUTH_SERVICE_CONFIG_ASC
  SOUTH_SERVICE_CONFIG_DESC
  NORTH_SERVICE_CONFIG_ASC
  NORTH_SERVICE_CONFIG_DESC
  SYSTEM_MONITOR_CONFIG_ASC
  SYSTEM_MONITOR_CONFIG_DESC
  OPERATING_SYSTEM_ASC
  OPERATING_SYSTEM_DESC
  INSTALL_STATUS_ASC
  INSTALL_STATUS_DESC
  DATA_RECEIPT_DELAY_ASC
  DATA_RECEIPT_DELAY_DESC
  HOST_ASC
  HOST_DESC
  OPCUA_NAMESPACE_URIS_ASC
  OPCUA_NAMESPACE_URIS_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Object` that is related to this `Account`."""
  onObject: Object

  """Reads a single `Equipment` that is related to this `Account`."""
  onEquipment: Equipment

  """Reads a single `Place` that is related to this `Account`."""
  onPlace: Place

  """Reads a single `Organization` that is related to this `Account`."""
  onOrganization: Organization

  """Reads a single `Attribute` that is related to this `Account`."""
  balanceAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Account`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `Account`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Account`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Account`."""
  partOf: Thing
}

"""All input for the create `Attribute` mutation."""
input CreateAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Attribute` to be created by this mutation."""
  attribute: AttributeInput!
}

"""All input for the create `AttributeLimit` mutation."""
input CreateAttributeLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AttributeLimit` to be created by this mutation."""
  attributeLimit: AttributeLimitInput!
}

"""The output of our create `AttributeLimit` mutation."""
type CreateAttributeLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AttributeLimit` that was created by this mutation."""
  attributeLimit: AttributeLimit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `AttributeLimit`."""
  onAttribute: Attribute

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  tag: Thing

  """Reads a single `TiqType` that is related to this `AttributeLimit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  partOf: Thing
}

"""The output of our create `Attribute` mutation."""
type CreateAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attribute` that was created by this mutation."""
  attribute: Attribute

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Attribute`."""
  currentValue: CurrentValue

  """Reads a single `Attribute` that is related to this `Attribute`."""
  referencedByAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Attribute`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Equipment` that is related to this `Attribute`."""
  onEquipment: Equipment

  """Reads a single `Object` that is related to this `Attribute`."""
  onObject: Object

  """Reads a single `Organization` that is related to this `Attribute`."""
  onOrganization: Organization

  """Reads a single `Place` that is related to this `Attribute`."""
  onPlace: Place

  """Reads a single `Thing` that is related to this `Attribute`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Attribute`."""
  attributeType: Thing

  """Reads a single `EnumerationType` that is related to this `Attribute`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Attribute`."""
  tag: Thing

  """Reads a single `Quantity` that is related to this `Attribute`."""
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `Attribute`.
  """
  typeToAttributeType: TypeToAttributeType

  """Reads a single `TiqType` that is related to this `Attribute`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Attribute`."""
  partOf: Thing
}

"""All input for the create `Connector` mutation."""
input CreateConnectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Connector` to be created by this mutation."""
  connector: ConnectorInput!
}

"""The output of our create `Connector` mutation."""
type CreateConnectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Connector` that was created by this mutation."""
  connector: Connector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Connector`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Connector`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Connector`."""
  partOf: Thing
}

"""All input for the create `CurrentValue` mutation."""
input CreateCurrentValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CurrentValue` to be created by this mutation."""
  currentValue: CurrentValueInput!
}

"""The output of our create `CurrentValue` mutation."""
type CreateCurrentValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentValue` that was created by this mutation."""
  currentValue: CurrentValue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EnumerationType` mutation."""
input CreateEnumerationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EnumerationType` to be created by this mutation."""
  enumerationType: EnumerationTypeInput!
}

"""The output of our create `EnumerationType` mutation."""
type CreateEnumerationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnumerationType` that was created by this mutation."""
  enumerationType: EnumerationType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `EnumerationType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  partOf: Thing
}

"""All input for the create `Equipment` mutation."""
input CreateEquipmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Equipment` to be created by this mutation."""
  equipment: EquipmentInput!
}

"""The output of our create `Equipment` mutation."""
type CreateEquipmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Equipment` that was created by this mutation."""
  equipment: Equipment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Equipment` that is related to this `Equipment`."""
  parentEquipment: Equipment

  """Reads a single `Place` that is related to this `Equipment`."""
  place: Place

  """Reads a single `EquipmentType` that is related to this `Equipment`."""
  equipmentType: EquipmentType

  """Reads a single `Thing` that is related to this `Equipment`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Equipment`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Equipment`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Equipment`."""
  partOf: Thing
}

"""All input for the create `EquipmentType` mutation."""
input CreateEquipmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EquipmentType` to be created by this mutation."""
  equipmentType: EquipmentTypeInput!
}

"""The output of our create `EquipmentType` mutation."""
type CreateEquipmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EquipmentType` that was created by this mutation."""
  equipmentType: EquipmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  asTiqType: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `EquipmentType`."""
  partOf: Thing
}

"""All input for the create `LedgerEntry` mutation."""
input CreateLedgerEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LedgerEntry` to be created by this mutation."""
  ledgerEntry: LedgerEntryInput!
}

"""The output of our create `LedgerEntry` mutation."""
type CreateLedgerEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LedgerEntry` that was created by this mutation."""
  ledgerEntry: LedgerEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  asThing: Thing

  """Reads a single `Account` that is related to this `LedgerEntry`."""
  account: Account

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  material: Thing

  """Reads a single `Transaction` that is related to this `LedgerEntry`."""
  transaction: Transaction
}

"""All input for the create `Library` mutation."""
input CreateLibraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Library` to be created by this mutation."""
  library: LibraryInput!
}

"""The output of our create `Library` mutation."""
type CreateLibraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Library` that was created by this mutation."""
  library: Library

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Library`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Library`."""
  type: TiqType
}

"""All input for the create `MeasurementUnit` mutation."""
input CreateMeasurementUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MeasurementUnit` to be created by this mutation."""
  measurementUnit: MeasurementUnitInput!
}

"""The output of our create `MeasurementUnit` mutation."""
type CreateMeasurementUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MeasurementUnit` that was created by this mutation."""
  measurementUnit: MeasurementUnit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  asThing: Thing

  """Reads a single `Quantity` that is related to this `MeasurementUnit`."""
  quantity: Quantity

  """Reads a single `TiqType` that is related to this `MeasurementUnit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  partOf: Thing
}

"""All input for the create `Object` mutation."""
input CreateObjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Object` to be created by this mutation."""
  object: ObjectInput!
}

"""The output of our create `Object` mutation."""
type CreateObjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Object` that was created by this mutation."""
  object: Object

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `Object`."""
  referencedByAttribute: Attribute

  """Reads a single `Object` that is related to this `Object`."""
  parentObject: Object

  """Reads a single `Thing` that is related to this `Object`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Object`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Object`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Object`."""
  partOf: Thing
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Organization`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Organization`."""
  asThing: Thing

  """
  Reads a single `TypeToChildType` that is related to this `Organization`.
  """
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Organization`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Organization`."""
  partOf: Thing
}

"""All input for the create `Place` mutation."""
input CreatePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Place` to be created by this mutation."""
  place: PlaceInput!
}

"""The output of our create `Place` mutation."""
type CreatePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Place` that was created by this mutation."""
  place: Place

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Place` that is related to this `Place`."""
  parentPlace: Place

  """Reads a single `Organization` that is related to this `Place`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Place`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Place`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Place`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Place`."""
  partOf: Thing
}

"""All input for the create `Quantity` mutation."""
input CreateQuantityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Quantity` to be created by this mutation."""
  quantity: QuantityInput!
}

"""The output of our create `Quantity` mutation."""
type CreateQuantityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Quantity` that was created by this mutation."""
  quantity: Quantity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Quantity`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Quantity`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Quantity`."""
  partOf: Thing
}

"""All input for the create `Relationship` mutation."""
input CreateRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Relationship` to be created by this mutation."""
  relationship: RelationshipInput!
}

"""The output of our create `Relationship` mutation."""
type CreateRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Relationship` that was created by this mutation."""
  relationship: Relationship

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Relationship`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  subject: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  object: Thing

  """
  Reads a single `RelationshipType` that is related to this `Relationship`.
  """
  relationshipType: RelationshipType
}

"""All input for the create `RelationshipType` mutation."""
input CreateRelationshipTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RelationshipType` to be created by this mutation."""
  relationshipType: RelationshipTypeInput!
}

"""The output of our create `RelationshipType` mutation."""
type CreateRelationshipTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationshipType` that was created by this mutation."""
  relationshipType: RelationshipType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `RelationshipType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  partOf: Thing
}

"""All input for the create `Script` mutation."""
input CreateScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Script` to be created by this mutation."""
  script: ScriptInput!
}

"""The output of our create `Script` mutation."""
type CreateScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was created by this mutation."""
  script: Script

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Library` that is related to this `Script`."""
  onLibrary: Library

  """Reads a single `TiqType` that is related to this `Script`."""
  onType: TiqType

  """Reads a single `Object` that is related to this `Script`."""
  onObject: Object

  """Reads a single `Thing` that is related to this `Script`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Script`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Script`."""
  partOf: Thing
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Tag`."""
  currentValue: CurrentValue

  """Reads a single `Connector` that is related to this `Tag`."""
  onConnector: Connector

  """Reads a single `Thing` that is related to this `Tag`."""
  asThing: Thing

  """Reads a single `EnumerationType` that is related to this `Tag`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Tag`."""
  opcGroup: Thing

  """Reads a single `TiqType` that is related to this `Tag`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Tag`."""
  partOf: Thing
}

"""All input for the create `TiqType` mutation."""
input CreateTiqTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TiqType` to be created by this mutation."""
  tiqType: TiqTypeInput!
}

"""The output of our create `TiqType` mutation."""
type CreateTiqTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TiqType` that was created by this mutation."""
  tiqType: TiqType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TiqType`."""
  superType: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TiqType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TiqType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  partOf: Thing
}

"""All input for the create `Transaction` mutation."""
input CreateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Transaction` to be created by this mutation."""
  transaction: TransactionInput!
}

"""The output of our create `Transaction` mutation."""
type CreateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was created by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Transaction`."""
  asThing: Thing
}

"""All input for the create `TypeToAttributeType` mutation."""
input CreateTypeToAttributeTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TypeToAttributeType` to be created by this mutation."""
  typeToAttributeType: TypeToAttributeTypeInput!
}

"""The output of our create `TypeToAttributeType` mutation."""
type CreateTypeToAttributeTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToAttributeType` that was created by this mutation."""
  typeToAttributeType: TypeToAttributeType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EquipmentType` that is related to this `TypeToAttributeType`.
  """
  equipmentType: EquipmentType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  tiqType: TiqType

  """
  Reads a single `MeasurementUnit` that is related to this `TypeToAttributeType`.
  """
  defaultMeasurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  attributeType: Thing

  """
  Reads a single `EnumerationType` that is related to this `TypeToAttributeType`.
  """
  enumerationType: EnumerationType

  """
  Reads a single `Quantity` that is related to this `TypeToAttributeType`.
  """
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `TypeToAttributeType`.
  """
  baseTypeToAttributeType: TypeToAttributeType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  type: TiqType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  referencedObjectType: TiqType

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  partOf: Thing
}

"""All input for the create `TypeToChildType` mutation."""
input CreateTypeToChildTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TypeToChildType` to be created by this mutation."""
  typeToChildType: TypeToChildTypeInput!
}

"""The output of our create `TypeToChildType` mutation."""
type CreateTypeToChildTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToChildType` that was created by this mutation."""
  typeToChildType: TypeToChildType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  tiqType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  childType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  partOf: Thing
}

type CurrentValue {
  tagOrAttrId: BigInt
  value: String
  status: BitString
  timestamp: Datetime

  """Reads a single `Attribute` that is related to this `CurrentValue`."""
  attributes: Attribute

  """Reads a single `Tag` that is related to this `CurrentValue`."""
  tags: Tag
}

"""
A condition to be used against `CurrentValue` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CurrentValueCondition {
  """Checks for equality with the object’s `tagOrAttrId` field."""
  tagOrAttrId: BigInt

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `status` field."""
  status: BitString

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""
A filter to be used against `CurrentValue` object types. All fields are combined with a logical ‘and.’
"""
input CurrentValueFilter {
  """Filter by the object’s `tagOrAttrId` field."""
  tagOrAttrId: BigIntFilter

  """Filter by the object’s `value` field."""
  value: StringFilter

  """Filter by the object’s `status` field."""
  status: BitStringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [CurrentValueFilter!]

  """Checks for any expressions in this list."""
  or: [CurrentValueFilter!]

  """Negates the expression."""
  not: CurrentValueFilter
}

"""An input for mutations affecting `CurrentValue`"""
input CurrentValueInput {
  tagOrAttrId: BigInt
  value: String
  status: BitString
  timestamp: Datetime
}

"""Methods to use when ordering `CurrentValue`."""
enum CurrentValuesOrderBy {
  NATURAL
  TAG_OR_ATTR_ID_ASC
  TAG_OR_ATTR_ID_DESC
  VALUE_ASC
  VALUE_DESC
  STATUS_ASC
  STATUS_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
}

enum DataSourceEnum {
  TAG
  CONFIG
  INTERNAL
  EXPRESSION
  STORED_EXPRESSION
  VISION
}

"""
A filter to be used against DataSourceEnum fields. All fields are combined with a logical ‘and.’
"""
input DataSourceEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: DataSourceEnum

  """Not equal to the specified value."""
  notEqualTo: DataSourceEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: DataSourceEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: DataSourceEnum

  """Included in the specified list."""
  in: [DataSourceEnum!]

  """Not included in the specified list."""
  notIn: [DataSourceEnum!]

  """Less than the specified value."""
  lessThan: DataSourceEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: DataSourceEnum

  """Greater than the specified value."""
  greaterThan: DataSourceEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: DataSourceEnum
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Object` that is related to this `Account`."""
  onObject: Object

  """Reads a single `Equipment` that is related to this `Account`."""
  onEquipment: Equipment

  """Reads a single `Place` that is related to this `Account`."""
  onPlace: Place

  """Reads a single `Organization` that is related to this `Account`."""
  onOrganization: Organization

  """Reads a single `Attribute` that is related to this `Account`."""
  balanceAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Account`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `Account`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Account`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Account`."""
  partOf: Thing
}

"""All input for the `deleteAttribute` mutation."""
input DeleteAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""All input for the `deleteAttributeLimit` mutation."""
input DeleteAttributeLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `AttributeLimit` mutation."""
type DeleteAttributeLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AttributeLimit` that was deleted by this mutation."""
  attributeLimit: AttributeLimit
  deletedAttributeLimitNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `AttributeLimit`."""
  onAttribute: Attribute

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  tag: Thing

  """Reads a single `TiqType` that is related to this `AttributeLimit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  partOf: Thing
}

"""The output of our delete `Attribute` mutation."""
type DeleteAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attribute` that was deleted by this mutation."""
  attribute: Attribute
  deletedAttributeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Attribute`."""
  currentValue: CurrentValue

  """Reads a single `Attribute` that is related to this `Attribute`."""
  referencedByAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Attribute`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Equipment` that is related to this `Attribute`."""
  onEquipment: Equipment

  """Reads a single `Object` that is related to this `Attribute`."""
  onObject: Object

  """Reads a single `Organization` that is related to this `Attribute`."""
  onOrganization: Organization

  """Reads a single `Place` that is related to this `Attribute`."""
  onPlace: Place

  """Reads a single `Thing` that is related to this `Attribute`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Attribute`."""
  attributeType: Thing

  """Reads a single `EnumerationType` that is related to this `Attribute`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Attribute`."""
  tag: Thing

  """Reads a single `Quantity` that is related to this `Attribute`."""
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `Attribute`.
  """
  typeToAttributeType: TypeToAttributeType

  """Reads a single `TiqType` that is related to this `Attribute`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Attribute`."""
  partOf: Thing
}

"""All input for the `deleteConnector` mutation."""
input DeleteConnectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Connector` mutation."""
type DeleteConnectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Connector` that was deleted by this mutation."""
  connector: Connector
  deletedConnectorNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Connector`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Connector`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Connector`."""
  partOf: Thing
}

"""All input for the `deleteEnumerationType` mutation."""
input DeleteEnumerationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `EnumerationType` mutation."""
type DeleteEnumerationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnumerationType` that was deleted by this mutation."""
  enumerationType: EnumerationType
  deletedEnumerationTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `EnumerationType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  partOf: Thing
}

"""All input for the `deleteEquipment` mutation."""
input DeleteEquipmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Equipment` mutation."""
type DeleteEquipmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Equipment` that was deleted by this mutation."""
  equipment: Equipment
  deletedEquipmentNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Equipment` that is related to this `Equipment`."""
  parentEquipment: Equipment

  """Reads a single `Place` that is related to this `Equipment`."""
  place: Place

  """Reads a single `EquipmentType` that is related to this `Equipment`."""
  equipmentType: EquipmentType

  """Reads a single `Thing` that is related to this `Equipment`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Equipment`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Equipment`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Equipment`."""
  partOf: Thing
}

"""All input for the `deleteEquipmentType` mutation."""
input DeleteEquipmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `EquipmentType` mutation."""
type DeleteEquipmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EquipmentType` that was deleted by this mutation."""
  equipmentType: EquipmentType
  deletedEquipmentTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  asTiqType: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `EquipmentType`."""
  partOf: Thing
}

"""All input for the `deleteLedgerEntry` mutation."""
input DeleteLedgerEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `LedgerEntry` mutation."""
type DeleteLedgerEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LedgerEntry` that was deleted by this mutation."""
  ledgerEntry: LedgerEntry
  deletedLedgerEntryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  asThing: Thing

  """Reads a single `Account` that is related to this `LedgerEntry`."""
  account: Account

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  material: Thing

  """Reads a single `Transaction` that is related to this `LedgerEntry`."""
  transaction: Transaction
}

"""All input for the `deleteLibrary` mutation."""
input DeleteLibraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Library` mutation."""
type DeleteLibraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Library` that was deleted by this mutation."""
  library: Library
  deletedLibraryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Library`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Library`."""
  type: TiqType
}

"""All input for the `deleteMeasurementUnit` mutation."""
input DeleteMeasurementUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `MeasurementUnit` mutation."""
type DeleteMeasurementUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MeasurementUnit` that was deleted by this mutation."""
  measurementUnit: MeasurementUnit
  deletedMeasurementUnitNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  asThing: Thing

  """Reads a single `Quantity` that is related to this `MeasurementUnit`."""
  quantity: Quantity

  """Reads a single `TiqType` that is related to this `MeasurementUnit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  partOf: Thing
}

"""All input for the `deleteObject` mutation."""
input DeleteObjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Object` mutation."""
type DeleteObjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Object` that was deleted by this mutation."""
  object: Object
  deletedObjectNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `Object`."""
  referencedByAttribute: Attribute

  """Reads a single `Object` that is related to this `Object`."""
  parentObject: Object

  """Reads a single `Thing` that is related to this `Object`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Object`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Object`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Object`."""
  partOf: Thing
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was deleted by this mutation."""
  organization: Organization
  deletedOrganizationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Organization`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Organization`."""
  asThing: Thing

  """
  Reads a single `TypeToChildType` that is related to this `Organization`.
  """
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Organization`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Organization`."""
  partOf: Thing
}

"""All input for the `deletePlace` mutation."""
input DeletePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Place` mutation."""
type DeletePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Place` that was deleted by this mutation."""
  place: Place
  deletedPlaceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Place` that is related to this `Place`."""
  parentPlace: Place

  """Reads a single `Organization` that is related to this `Place`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Place`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Place`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Place`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Place`."""
  partOf: Thing
}

"""All input for the `deleteQuantity` mutation."""
input DeleteQuantityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Quantity` mutation."""
type DeleteQuantityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Quantity` that was deleted by this mutation."""
  quantity: Quantity
  deletedQuantityNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Quantity`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Quantity`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Quantity`."""
  partOf: Thing
}

"""All input for the `deleteRelationship` mutation."""
input DeleteRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Relationship` mutation."""
type DeleteRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Relationship` that was deleted by this mutation."""
  relationship: Relationship
  deletedRelationshipNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Relationship`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  subject: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  object: Thing

  """
  Reads a single `RelationshipType` that is related to this `Relationship`.
  """
  relationshipType: RelationshipType
}

"""All input for the `deleteRelationshipType` mutation."""
input DeleteRelationshipTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `RelationshipType` mutation."""
type DeleteRelationshipTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationshipType` that was deleted by this mutation."""
  relationshipType: RelationshipType
  deletedRelationshipTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `RelationshipType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  partOf: Thing
}

"""All input for the `deleteScript` mutation."""
input DeleteScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Script` mutation."""
type DeleteScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was deleted by this mutation."""
  script: Script
  deletedScriptNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Library` that is related to this `Script`."""
  onLibrary: Library

  """Reads a single `TiqType` that is related to this `Script`."""
  onType: TiqType

  """Reads a single `Object` that is related to this `Script`."""
  onObject: Object

  """Reads a single `Thing` that is related to this `Script`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Script`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Script`."""
  partOf: Thing
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was deleted by this mutation."""
  tag: Tag
  deletedTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Tag`."""
  currentValue: CurrentValue

  """Reads a single `Connector` that is related to this `Tag`."""
  onConnector: Connector

  """Reads a single `Thing` that is related to this `Tag`."""
  asThing: Thing

  """Reads a single `EnumerationType` that is related to this `Tag`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Tag`."""
  opcGroup: Thing

  """Reads a single `TiqType` that is related to this `Tag`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Tag`."""
  partOf: Thing
}

"""All input for the `deleteTiqType` mutation."""
input DeleteTiqTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `TiqType` mutation."""
type DeleteTiqTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TiqType` that was deleted by this mutation."""
  tiqType: TiqType
  deletedTiqTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TiqType`."""
  superType: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TiqType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TiqType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  partOf: Thing
}

"""All input for the `deleteTransaction` mutation."""
input DeleteTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""The output of our delete `Transaction` mutation."""
type DeleteTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was deleted by this mutation."""
  transaction: Transaction
  deletedTransactionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Transaction`."""
  asThing: Thing
}

"""All input for the `deleteTypeToAttributeType` mutation."""
input DeleteTypeToAttributeTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `TypeToAttributeType` mutation."""
type DeleteTypeToAttributeTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToAttributeType` that was deleted by this mutation."""
  typeToAttributeType: TypeToAttributeType
  deletedTypeToAttributeTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EquipmentType` that is related to this `TypeToAttributeType`.
  """
  equipmentType: EquipmentType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  tiqType: TiqType

  """
  Reads a single `MeasurementUnit` that is related to this `TypeToAttributeType`.
  """
  defaultMeasurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  attributeType: Thing

  """
  Reads a single `EnumerationType` that is related to this `TypeToAttributeType`.
  """
  enumerationType: EnumerationType

  """
  Reads a single `Quantity` that is related to this `TypeToAttributeType`.
  """
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `TypeToAttributeType`.
  """
  baseTypeToAttributeType: TypeToAttributeType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  type: TiqType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  referencedObjectType: TiqType

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  partOf: Thing
}

"""All input for the `deleteTypeToChildType` mutation."""
input DeleteTypeToChildTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our delete `TypeToChildType` mutation."""
type DeleteTypeToChildTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToChildType` that was deleted by this mutation."""
  typeToChildType: TypeToChildType
  deletedTypeToChildTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  tiqType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  childType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  partOf: Thing
}

type EnumerationType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """
  Array of default enumeration values, which can be integers or texts. Examples: [0,1] or [on,off]
  """
  defaultEnumerationValues: [String]

  """
  Array of enumeration names, corresponding to the default_enumeration_values as
  parallel arrays. Each unordered set of enumeration names is unique. Example:
  [on,off] is treated the same as [off,on]
  """
  enumerationNames: [String]
  enumerationDescriptions: [String]
  enumerationColorCodes: [String]

  """The identifier, in NodeId format, of an OPC UA ExtensionObject"""
  opcuaTypeIds: [String]

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `EnumerationType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!
}

"""
A condition to be used against `EnumerationType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EnumerationTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """
  Checks for equality with the object’s `defaultEnumerationValues` field.
  """
  defaultEnumerationValues: [String]

  """Checks for equality with the object’s `enumerationNames` field."""
  enumerationNames: [String]

  """Checks for equality with the object’s `enumerationDescriptions` field."""
  enumerationDescriptions: [String]

  """Checks for equality with the object’s `enumerationColorCodes` field."""
  enumerationColorCodes: [String]

  """Checks for equality with the object’s `opcuaTypeIds` field."""
  opcuaTypeIds: [String]
}

"""
A filter to be used against `EnumerationType` object types. All fields are combined with a logical ‘and.’
"""
input EnumerationTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `defaultEnumerationValues` field."""
  defaultEnumerationValues: StringListFilter

  """Filter by the object’s `enumerationNames` field."""
  enumerationNames: StringListFilter

  """Filter by the object’s `enumerationDescriptions` field."""
  enumerationDescriptions: StringListFilter

  """Filter by the object’s `enumerationColorCodes` field."""
  enumerationColorCodes: StringListFilter

  """Filter by the object’s `opcuaTypeIds` field."""
  opcuaTypeIds: StringListFilter

  """Checks for all expressions in this list."""
  and: [EnumerationTypeFilter!]

  """Checks for any expressions in this list."""
  or: [EnumerationTypeFilter!]

  """Negates the expression."""
  not: EnumerationTypeFilter
}

"""An input for mutations affecting `EnumerationType`"""
input EnumerationTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """
  Array of default enumeration values, which can be integers or texts. Examples: [0,1] or [on,off]
  """
  defaultEnumerationValues: [String]

  """
  Array of enumeration names, corresponding to the default_enumeration_values as
  parallel arrays. Each unordered set of enumeration names is unique. Example:
  [on,off] is treated the same as [off,on]
  """
  enumerationNames: [String]
  enumerationDescriptions: [String]
  enumerationColorCodes: [String]

  """The identifier, in NodeId format, of an OPC UA ExtensionObject"""
  opcuaTypeIds: [String]
}

"""
Represents an update to a `EnumerationType`. Fields that are set will be updated.
"""
input EnumerationTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """
  Array of default enumeration values, which can be integers or texts. Examples: [0,1] or [on,off]
  """
  defaultEnumerationValues: [String]

  """
  Array of enumeration names, corresponding to the default_enumeration_values as
  parallel arrays. Each unordered set of enumeration names is unique. Example:
  [on,off] is treated the same as [off,on]
  """
  enumerationNames: [String]
  enumerationDescriptions: [String]
  enumerationColorCodes: [String]

  """The identifier, in NodeId format, of an OPC UA ExtensionObject"""
  opcuaTypeIds: [String]
}

"""Methods to use when ordering `EnumerationType`."""
enum EnumerationTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  SOURCE_CREATED_TIMESTAMP_ASC
  SOURCE_CREATED_TIMESTAMP_DESC
  SOURCE_UPDATED_TIMESTAMP_ASC
  SOURCE_UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  DEFAULT_ENUMERATION_VALUES_ASC
  DEFAULT_ENUMERATION_VALUES_DESC
  ENUMERATION_NAMES_ASC
  ENUMERATION_NAMES_DESC
  ENUMERATION_DESCRIPTIONS_ASC
  ENUMERATION_DESCRIPTIONS_DESC
  ENUMERATION_COLOR_CODES_ASC
  ENUMERATION_COLOR_CODES_DESC
  OPCUA_TYPE_IDS_ASC
  OPCUA_TYPE_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Equipment {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Equipment` that is related to this `Equipment`."""
  parentEquipment: Equipment

  """Reads a single `Place` that is related to this `Equipment`."""
  place: Place

  """Reads a single `EquipmentType` that is related to this `Equipment`."""
  equipmentType: EquipmentType

  """Reads a single `Thing` that is related to this `Equipment`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Equipment`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Equipment`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Equipment`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Equipment`."""
  childEquipment(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!
}

"""
A condition to be used against `Equipment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EquipmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigInt

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Equipment` object types. All fields are combined with a logical ‘and.’
"""
input EquipmentFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigIntFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [EquipmentFilter!]

  """Checks for any expressions in this list."""
  or: [EquipmentFilter!]

  """Negates the expression."""
  not: EquipmentFilter
}

"""An input for mutations affecting `Equipment`"""
input EquipmentInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Equipment`."""
enum EquipmentOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  TYPE_TO_CHILD_TYPE_ID_ASC
  TYPE_TO_CHILD_TYPE_ID_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Equipment`. Fields that are set will be updated.
"""
input EquipmentPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

type EquipmentType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  asTiqType: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `EquipmentType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Equipment`."""
  equipments(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!
}

"""
A condition to be used against `EquipmentType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EquipmentTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `subTypeOfId` field."""
  subTypeOfId: BigInt

  """
  Checks for equality with the object’s `taxonomySystemNodeTypeId` field.
  """
  taxonomySystemNodeTypeId: Int

  """Checks for equality with the object’s `materializedSubTypePath` field."""
  materializedSubTypePath: [BigInt]

  """Checks for equality with the object’s `baseSystemType` field."""
  baseSystemType: String

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `EquipmentType` object types. All fields are combined with a logical ‘and.’
"""
input EquipmentTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `subTypeOfId` field."""
  subTypeOfId: BigIntFilter

  """Filter by the object’s `taxonomySystemNodeTypeId` field."""
  taxonomySystemNodeTypeId: IntFilter

  """Filter by the object’s `materializedSubTypePath` field."""
  materializedSubTypePath: BigIntListFilter

  """Filter by the object’s `baseSystemType` field."""
  baseSystemType: StringFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [EquipmentTypeFilter!]

  """Checks for any expressions in this list."""
  or: [EquipmentTypeFilter!]

  """Negates the expression."""
  not: EquipmentTypeFilter
}

"""An input for mutations affecting `EquipmentType`"""
input EquipmentTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `EquipmentType`. Fields that are set will be updated.
"""
input EquipmentTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `EquipmentType`."""
enum EquipmentTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  SUB_TYPE_OF_ID_ASC
  SUB_TYPE_OF_ID_DESC
  TAXONOMY_SYSTEM_NODE_TYPE_ID_ASC
  TAXONOMY_SYSTEM_NODE_TYPE_ID_DESC
  MATERIALIZED_SUB_TYPE_PATH_ASC
  MATERIALIZED_SUB_TYPE_PATH_DESC
  BASE_SYSTEM_TYPE_ASC
  BASE_SYSTEM_TYPE_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""All input for the `getAuthenticatorForGraphql` mutation."""
input GetAuthenticatorForGraphqlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pClientSessionId: String
}

"""The output of our `getAuthenticatorForGraphql` mutation."""
type GetAuthenticatorForGraphqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The return type of our `getRawHistoryDataWithSamplingConnection` query.
"""
type GetRawHistoryDataWithSamplingRecord {
  id: BigInt
  status: BigInt
  ts: Datetime
  intvalue: BigInt
  boolvalue: Boolean
  floatvalue: Float
  stringvalue: String
  datetimevalue: Datetime
  intervalvalue: Interval
  objectvalue: JSON
  enumerationvalue: String
  dataType: ScalarTypeEnum
}

"""
A filter to be used against `GetRawHistoryDataWithSamplingRecord` object types.
All fields are combined with a logical ‘and.’
"""
input GetRawHistoryDataWithSamplingRecordFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `status` field."""
  status: BigIntFilter

  """Filter by the object’s `ts` field."""
  ts: DatetimeFilter

  """Filter by the object’s `intvalue` field."""
  intvalue: BigIntFilter

  """Filter by the object’s `boolvalue` field."""
  boolvalue: BooleanFilter

  """Filter by the object’s `floatvalue` field."""
  floatvalue: FloatFilter

  """Filter by the object’s `stringvalue` field."""
  stringvalue: StringFilter

  """Filter by the object’s `datetimevalue` field."""
  datetimevalue: DatetimeFilter

  """Filter by the object’s `intervalvalue` field."""
  intervalvalue: IntervalFilter

  """Filter by the object’s `objectvalue` field."""
  objectvalue: JSONFilter

  """Filter by the object’s `enumerationvalue` field."""
  enumerationvalue: StringFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Checks for all expressions in this list."""
  and: [GetRawHistoryDataWithSamplingRecordFilter!]

  """Checks for any expressions in this list."""
  or: [GetRawHistoryDataWithSamplingRecordFilter!]

  """Negates the expression."""
  not: GetRawHistoryDataWithSamplingRecordFilter
}

enum InstallStatusEnum {
  CREATED
  DOWNLOADED
  INSTALLED
  UNINSTALLED
}

"""
A filter to be used against InstallStatusEnum fields. All fields are combined with a logical ‘and.’
"""
input InstallStatusEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: InstallStatusEnum

  """Not equal to the specified value."""
  notEqualTo: InstallStatusEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: InstallStatusEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: InstallStatusEnum

  """Included in the specified list."""
  in: [InstallStatusEnum!]

  """Not included in the specified list."""
  notIn: [InstallStatusEnum!]

  """Less than the specified value."""
  lessThan: InstallStatusEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: InstallStatusEnum

  """Greater than the specified value."""
  greaterThan: InstallStatusEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: InstallStatusEnum
}

enum InterpolationMethodEnum {
  NONE
  PREVIOUS
  NEXT
  LINEAR
}

"""
A filter to be used against InterpolationMethodEnum fields. All fields are combined with a logical ‘and.’
"""
input InterpolationMethodEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: InterpolationMethodEnum

  """Not equal to the specified value."""
  notEqualTo: InterpolationMethodEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: InterpolationMethodEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: InterpolationMethodEnum

  """Included in the specified list."""
  in: [InterpolationMethodEnum!]

  """Not included in the specified list."""
  notIn: [InterpolationMethodEnum!]

  """Less than the specified value."""
  lessThan: InterpolationMethodEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: InterpolationMethodEnum

  """Greater than the specified value."""
  greaterThan: InterpolationMethodEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: InterpolationMethodEnum
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

"""
A filter to be used against Interval fields. All fields are combined with a logical ‘and.’
"""
input IntervalFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IntervalInput

  """Not equal to the specified value."""
  notEqualTo: IntervalInput

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IntervalInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IntervalInput

  """Included in the specified list."""
  in: [IntervalInput!]

  """Not included in the specified list."""
  notIn: [IntervalInput!]

  """Less than the specified value."""
  lessThan: IntervalInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IntervalInput

  """Greater than the specified value."""
  greaterThan: IntervalInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IntervalInput
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of minutes."""
  minutes: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of days."""
  days: Int

  """A quantity of months."""
  months: Int

  """A quantity of years."""
  years: Int
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtClaim

type JwtRequest {
  challenge: String
  message: String
}

"""Methods to use when ordering `LedgerEntry`."""
enum LedgerEntriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  MATERIAL_PORT_ID_ASC
  MATERIAL_PORT_ID_DESC
  UNIT_ID_ASC
  UNIT_ID_DESC
  MATERIAL_ID_ASC
  MATERIAL_ID_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  TARGET_AMOUNT_ASC
  TARGET_AMOUNT_DESC
  START_TIMESTAMP_ASC
  START_TIMESTAMP_DESC
  END_TIMESTAMP_ASC
  END_TIMESTAMP_DESC
  START_EMPTY_STATE_ASC
  START_EMPTY_STATE_DESC
  END_EMPTY_STATE_ASC
  END_EMPTY_STATE_DESC
  START_CLEAN_STATE_ASC
  START_CLEAN_STATE_DESC
  END_CLEAN_STATE_ASC
  END_CLEAN_STATE_DESC
  START_BALANCE_ASC
  START_BALANCE_DESC
  END_BALANCE_ASC
  END_BALANCE_DESC
  SOURCES_DETERMINED_ASC
  SOURCES_DETERMINED_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  OBJECT_EVENTS_ASC
  OBJECT_EVENTS_DESC
  MATERIAL_ATTRIBUTES_ASC
  MATERIAL_ATTRIBUTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type LedgerEntry {
  id: BigInt!

  """Internal ID, auto incrementing"""
  accountId: BigInt
  transactionId: BigInt
  materialPortId: BigInt
  unitId: BigInt

  """Internal ID, auto incrementing"""
  materialId: BigInt
  amount: Float
  targetAmount: Float
  startTimestamp: Datetime
  endTimestamp: Datetime
  startEmptyState: Boolean
  endEmptyState: Boolean
  startCleanState: Boolean
  endCleanState: Boolean
  startBalance: Float
  endBalance: Float
  sourcesDetermined: Boolean
  document: JSON
  objectEvents: [BigInt]
  materialAttributes: JSON

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  asThing: Thing

  """Reads a single `Account` that is related to this `LedgerEntry`."""
  account: Account

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  material: Thing

  """Reads a single `Transaction` that is related to this `LedgerEntry`."""
  transaction: Transaction
}

"""
A condition to be used against `LedgerEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LedgerEntryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `accountId` field."""
  accountId: BigInt

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: BigInt

  """Checks for equality with the object’s `materialPortId` field."""
  materialPortId: BigInt

  """Checks for equality with the object’s `unitId` field."""
  unitId: BigInt

  """Checks for equality with the object’s `materialId` field."""
  materialId: BigInt

  """Checks for equality with the object’s `amount` field."""
  amount: Float

  """Checks for equality with the object’s `targetAmount` field."""
  targetAmount: Float

  """Checks for equality with the object’s `startTimestamp` field."""
  startTimestamp: Datetime

  """Checks for equality with the object’s `endTimestamp` field."""
  endTimestamp: Datetime

  """Checks for equality with the object’s `startEmptyState` field."""
  startEmptyState: Boolean

  """Checks for equality with the object’s `endEmptyState` field."""
  endEmptyState: Boolean

  """Checks for equality with the object’s `startCleanState` field."""
  startCleanState: Boolean

  """Checks for equality with the object’s `endCleanState` field."""
  endCleanState: Boolean

  """Checks for equality with the object’s `startBalance` field."""
  startBalance: Float

  """Checks for equality with the object’s `endBalance` field."""
  endBalance: Float

  """Checks for equality with the object’s `sourcesDetermined` field."""
  sourcesDetermined: Boolean

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `objectEvents` field."""
  objectEvents: [BigInt]

  """Checks for equality with the object’s `materialAttributes` field."""
  materialAttributes: JSON
}

"""
A filter to be used against `LedgerEntry` object types. All fields are combined with a logical ‘and.’
"""
input LedgerEntryFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `accountId` field."""
  accountId: BigIntFilter

  """Filter by the object’s `transactionId` field."""
  transactionId: BigIntFilter

  """Filter by the object’s `materialPortId` field."""
  materialPortId: BigIntFilter

  """Filter by the object’s `unitId` field."""
  unitId: BigIntFilter

  """Filter by the object’s `materialId` field."""
  materialId: BigIntFilter

  """Filter by the object’s `amount` field."""
  amount: FloatFilter

  """Filter by the object’s `targetAmount` field."""
  targetAmount: FloatFilter

  """Filter by the object’s `startTimestamp` field."""
  startTimestamp: DatetimeFilter

  """Filter by the object’s `endTimestamp` field."""
  endTimestamp: DatetimeFilter

  """Filter by the object’s `startEmptyState` field."""
  startEmptyState: BooleanFilter

  """Filter by the object’s `endEmptyState` field."""
  endEmptyState: BooleanFilter

  """Filter by the object’s `startCleanState` field."""
  startCleanState: BooleanFilter

  """Filter by the object’s `endCleanState` field."""
  endCleanState: BooleanFilter

  """Filter by the object’s `startBalance` field."""
  startBalance: FloatFilter

  """Filter by the object’s `endBalance` field."""
  endBalance: FloatFilter

  """Filter by the object’s `sourcesDetermined` field."""
  sourcesDetermined: BooleanFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `objectEvents` field."""
  objectEvents: BigIntListFilter

  """Filter by the object’s `materialAttributes` field."""
  materialAttributes: JSONFilter

  """Checks for all expressions in this list."""
  and: [LedgerEntryFilter!]

  """Checks for any expressions in this list."""
  or: [LedgerEntryFilter!]

  """Negates the expression."""
  not: LedgerEntryFilter
}

"""An input for mutations affecting `LedgerEntry`"""
input LedgerEntryInput {
  """Internal ID, auto incrementing"""
  accountId: BigInt
  transactionId: BigInt
  materialPortId: BigInt
  unitId: BigInt

  """Internal ID, auto incrementing"""
  materialId: BigInt
  amount: Float
  targetAmount: Float
  startTimestamp: Datetime
  endTimestamp: Datetime
  startEmptyState: Boolean
  endEmptyState: Boolean
  startCleanState: Boolean
  endCleanState: Boolean
  startBalance: Float
  endBalance: Float
  sourcesDetermined: Boolean
  document: JSON
  objectEvents: [BigInt]
  materialAttributes: JSON
}

"""
Represents an update to a `LedgerEntry`. Fields that are set will be updated.
"""
input LedgerEntryPatch {
  id: BigInt

  """Internal ID, auto incrementing"""
  accountId: BigInt
  transactionId: BigInt
  materialPortId: BigInt
  unitId: BigInt

  """Internal ID, auto incrementing"""
  materialId: BigInt
  amount: Float
  targetAmount: Float
  startTimestamp: Datetime
  endTimestamp: Datetime
  startEmptyState: Boolean
  endEmptyState: Boolean
  startCleanState: Boolean
  endCleanState: Boolean
  startBalance: Float
  endBalance: Float
  sourcesDetermined: Boolean
  document: JSON
  objectEvents: [BigInt]
  materialAttributes: JSON
}

"""Methods to use when ordering `Library`."""
enum LibrariesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  VERSION_ASC
  VERSION_DESC
  LICENSING_ASC
  LICENSING_DESC
  LOCKED_ASC
  LOCKED_DESC
  NAMESPACE_URIS_ASC
  NAMESPACE_URIS_DESC
  SERVER_URIS_ASC
  SERVER_URIS_DESC
  MODELS_ASC
  MODELS_DESC
  ALIASES_ASC
  ALIASES_DESC
  EXTENSIONS_ASC
  EXTENSIONS_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Library {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  version: String
  licensing: String
  locked: Boolean
  namespaceUris: JSON
  serverUris: JSON
  models: JSON
  aliases: JSON
  extensions: JSON
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Thing` that is related to this `Library`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Library`."""
  type: TiqType

  """Reads and enables pagination through a set of `Script`."""
  scripts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]!
}

"""
A condition to be used against `Library` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LibraryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `version` field."""
  version: String

  """Checks for equality with the object’s `licensing` field."""
  licensing: String

  """Checks for equality with the object’s `locked` field."""
  locked: Boolean

  """Checks for equality with the object’s `namespaceUris` field."""
  namespaceUris: JSON

  """Checks for equality with the object’s `serverUris` field."""
  serverUris: JSON

  """Checks for equality with the object’s `models` field."""
  models: JSON

  """Checks for equality with the object’s `aliases` field."""
  aliases: JSON

  """Checks for equality with the object’s `extensions` field."""
  extensions: JSON

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Library` object types. All fields are combined with a logical ‘and.’
"""
input LibraryFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `version` field."""
  version: StringFilter

  """Filter by the object’s `licensing` field."""
  licensing: StringFilter

  """Filter by the object’s `locked` field."""
  locked: BooleanFilter

  """Filter by the object’s `namespaceUris` field."""
  namespaceUris: JSONFilter

  """Filter by the object’s `serverUris` field."""
  serverUris: JSONFilter

  """Filter by the object’s `models` field."""
  models: JSONFilter

  """Filter by the object’s `aliases` field."""
  aliases: JSONFilter

  """Filter by the object’s `extensions` field."""
  extensions: JSONFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [LibraryFilter!]

  """Checks for any expressions in this list."""
  or: [LibraryFilter!]

  """Negates the expression."""
  not: LibraryFilter
}

"""An input for mutations affecting `Library`"""
input LibraryInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  version: String
  licensing: String
  locked: Boolean
  namespaceUris: JSON
  serverUris: JSON
  models: JSON
  aliases: JSON
  extensions: JSON
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Library`. Fields that are set will be updated.
"""
input LibraryPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  version: String
  licensing: String
  locked: Boolean
  namespaceUris: JSON
  serverUris: JSON
  models: JSON
  aliases: JSON
  extensions: JSON
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

enum LimitDirectionEnum {
  GREATER
  LESS
  TARGET
}

"""
A filter to be used against LimitDirectionEnum fields. All fields are combined with a logical ‘and.’
"""
input LimitDirectionEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: LimitDirectionEnum

  """Not equal to the specified value."""
  notEqualTo: LimitDirectionEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: LimitDirectionEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: LimitDirectionEnum

  """Included in the specified list."""
  in: [LimitDirectionEnum!]

  """Not included in the specified list."""
  notIn: [LimitDirectionEnum!]

  """Less than the specified value."""
  lessThan: LimitDirectionEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: LimitDirectionEnum

  """Greater than the specified value."""
  greaterThan: LimitDirectionEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: LimitDirectionEnum
}

"""
The measurement units view provide information about each measurement unit,
their quantity kind, how to convert them, and how to map them to OPC UA and
UNECE standards.
"""
type MeasurementUnit {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """The conversion offset is used to convert to the base unit."""
  conversionOffset: Float

  """The conversion multiplier is used to convert to the base unit."""
  conversionMultiplier: Float

  """
  The the symbol that will be used as a postfix in most cases. Example Pa for pressure (Pascal).
  """
  symbol: String

  """
  The symbol that is used to express the units in quantity measures. Example
  N/m2 for pressure referring to force (N) and area (m2) quantities.
  """
  symbolOtherSiUnits: String

  """The id that links the column to the si_prefixes table."""
  siPrefixId: Int
  unlinkRelativeName: Boolean

  """
  The engineering unit id used by the OPC UA Standard. See
  https://www.opcfoundation.org/UA/EngineeringUnits/UNECE/UNECE_to_OPCUA.csv
  """
  opcuaUnitId: BigInt

  """The UNECE code. See https://unece.org/trade/cefact/UNLOCODE-Download"""
  uneceCode: String

  """The UNECE name."""
  uneceName: String

  """
  If false, then it is not hidden by default. This is to de-clutter the list of measurement units.
  """
  isHidden: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  asThing: Thing

  """Reads a single `Quantity` that is related to this `MeasurementUnit`."""
  quantity: Quantity

  """Reads a single `TiqType` that is related to this `MeasurementUnit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByDefaultMeasurementUnitId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!
}

"""
A condition to be used against `MeasurementUnit` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MeasurementUnitCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `quantityId` field."""
  quantityId: BigInt

  """Checks for equality with the object’s `conversionOffset` field."""
  conversionOffset: Float

  """Checks for equality with the object’s `conversionMultiplier` field."""
  conversionMultiplier: Float

  """Checks for equality with the object’s `symbol` field."""
  symbol: String

  """Checks for equality with the object’s `symbolOtherSiUnits` field."""
  symbolOtherSiUnits: String

  """Checks for equality with the object’s `siPrefixId` field."""
  siPrefixId: Int

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `opcuaUnitId` field."""
  opcuaUnitId: BigInt

  """Checks for equality with the object’s `uneceCode` field."""
  uneceCode: String

  """Checks for equality with the object’s `uneceName` field."""
  uneceName: String

  """Checks for equality with the object’s `isHidden` field."""
  isHidden: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `MeasurementUnit` object types. All fields are combined with a logical ‘and.’
"""
input MeasurementUnitFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `quantityId` field."""
  quantityId: BigIntFilter

  """Filter by the object’s `conversionOffset` field."""
  conversionOffset: FloatFilter

  """Filter by the object’s `conversionMultiplier` field."""
  conversionMultiplier: FloatFilter

  """Filter by the object’s `symbol` field."""
  symbol: StringFilter

  """Filter by the object’s `symbolOtherSiUnits` field."""
  symbolOtherSiUnits: StringFilter

  """Filter by the object’s `siPrefixId` field."""
  siPrefixId: IntFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `opcuaUnitId` field."""
  opcuaUnitId: BigIntFilter

  """Filter by the object’s `uneceCode` field."""
  uneceCode: StringFilter

  """Filter by the object’s `uneceName` field."""
  uneceName: StringFilter

  """Filter by the object’s `isHidden` field."""
  isHidden: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [MeasurementUnitFilter!]

  """Checks for any expressions in this list."""
  or: [MeasurementUnitFilter!]

  """Negates the expression."""
  not: MeasurementUnitFilter
}

"""An input for mutations affecting `MeasurementUnit`"""
input MeasurementUnitInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """The conversion offset is used to convert to the base unit."""
  conversionOffset: Float

  """The conversion multiplier is used to convert to the base unit."""
  conversionMultiplier: Float

  """
  The the symbol that will be used as a postfix in most cases. Example Pa for pressure (Pascal).
  """
  symbol: String

  """
  The symbol that is used to express the units in quantity measures. Example
  N/m2 for pressure referring to force (N) and area (m2) quantities.
  """
  symbolOtherSiUnits: String

  """The id that links the column to the si_prefixes table."""
  siPrefixId: Int
  unlinkRelativeName: Boolean

  """
  The engineering unit id used by the OPC UA Standard. See
  https://www.opcfoundation.org/UA/EngineeringUnits/UNECE/UNECE_to_OPCUA.csv
  """
  opcuaUnitId: BigInt

  """The UNECE code. See https://unece.org/trade/cefact/UNLOCODE-Download"""
  uneceCode: String

  """The UNECE name."""
  uneceName: String

  """
  If false, then it is not hidden by default. This is to de-clutter the list of measurement units.
  """
  isHidden: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `MeasurementUnit`. Fields that are set will be updated.
"""
input MeasurementUnitPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """The conversion offset is used to convert to the base unit."""
  conversionOffset: Float

  """The conversion multiplier is used to convert to the base unit."""
  conversionMultiplier: Float

  """
  The the symbol that will be used as a postfix in most cases. Example Pa for pressure (Pascal).
  """
  symbol: String

  """
  The symbol that is used to express the units in quantity measures. Example
  N/m2 for pressure referring to force (N) and area (m2) quantities.
  """
  symbolOtherSiUnits: String

  """The id that links the column to the si_prefixes table."""
  siPrefixId: Int
  unlinkRelativeName: Boolean

  """
  The engineering unit id used by the OPC UA Standard. See
  https://www.opcfoundation.org/UA/EngineeringUnits/UNECE/UNECE_to_OPCUA.csv
  """
  opcuaUnitId: BigInt

  """The UNECE code. See https://unece.org/trade/cefact/UNLOCODE-Download"""
  uneceCode: String

  """The UNECE name."""
  uneceName: String

  """
  If false, then it is not hidden by default. This is to de-clutter the list of measurement units.
  """
  isHidden: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `MeasurementUnit`."""
enum MeasurementUnitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  QUANTITY_ID_ASC
  QUANTITY_ID_DESC
  CONVERSION_OFFSET_ASC
  CONVERSION_OFFSET_DESC
  CONVERSION_MULTIPLIER_ASC
  CONVERSION_MULTIPLIER_DESC
  SYMBOL_ASC
  SYMBOL_DESC
  SYMBOL_OTHER_SI_UNITS_ASC
  SYMBOL_OTHER_SI_UNITS_DESC
  SI_PREFIX_ID_ASC
  SI_PREFIX_ID_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  OPCUA_UNIT_ID_ASC
  OPCUA_UNIT_ID_DESC
  UNECE_CODE_ASC
  UNECE_CODE_DESC
  UNECE_NAME_ASC
  UNECE_NAME_DESC
  IS_HIDDEN_ASC
  IS_HIDDEN_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `AttributeLimit`."""
  createAttributeLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttributeLimitInput!
  ): CreateAttributeLimitPayload

  """Creates a single `Attribute`."""
  createAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttributeInput!
  ): CreateAttributePayload

  """Creates a single `Connector`."""
  createConnector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConnectorInput!
  ): CreateConnectorPayload

  """Creates a single `CurrentValue`."""
  createCurrentValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCurrentValueInput!
  ): CreateCurrentValuePayload

  """Creates a single `EnumerationType`."""
  createEnumerationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEnumerationTypeInput!
  ): CreateEnumerationTypePayload

  """Creates a single `Equipment`."""
  createEquipment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEquipmentInput!
  ): CreateEquipmentPayload

  """Creates a single `EquipmentType`."""
  createEquipmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEquipmentTypeInput!
  ): CreateEquipmentTypePayload

  """Creates a single `LedgerEntry`."""
  createLedgerEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLedgerEntryInput!
  ): CreateLedgerEntryPayload

  """Creates a single `Library`."""
  createLibrary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLibraryInput!
  ): CreateLibraryPayload

  """Creates a single `MeasurementUnit`."""
  createMeasurementUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMeasurementUnitInput!
  ): CreateMeasurementUnitPayload

  """Creates a single `Object`."""
  createObject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateObjectInput!
  ): CreateObjectPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `Place`."""
  createPlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlaceInput!
  ): CreatePlacePayload

  """Creates a single `Quantity`."""
  createQuantity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateQuantityInput!
  ): CreateQuantityPayload

  """Creates a single `RelationshipType`."""
  createRelationshipType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationshipTypeInput!
  ): CreateRelationshipTypePayload

  """Creates a single `Relationship`."""
  createRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelationshipInput!
  ): CreateRelationshipPayload

  """Creates a single `Script`."""
  createScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScriptInput!
  ): CreateScriptPayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `TiqType`."""
  createTiqType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTiqTypeInput!
  ): CreateTiqTypePayload

  """Creates a single `Transaction`."""
  createTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTransactionInput!
  ): CreateTransactionPayload

  """Creates a single `TypeToAttributeType`."""
  createTypeToAttributeType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTypeToAttributeTypeInput!
  ): CreateTypeToAttributeTypePayload

  """Creates a single `TypeToChildType`."""
  createTypeToChildType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTypeToChildTypeInput!
  ): CreateTypeToChildTypePayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `AttributeLimit` using a unique key and a patch."""
  updateAttributeLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttributeLimitInput!
  ): UpdateAttributeLimitPayload

  """Updates a single `Attribute` using a unique key and a patch."""
  updateAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttributeInput!
  ): UpdateAttributePayload

  """Updates a single `Connector` using a unique key and a patch."""
  updateConnector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConnectorInput!
  ): UpdateConnectorPayload

  """Updates a single `EnumerationType` using a unique key and a patch."""
  updateEnumerationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnumerationTypeInput!
  ): UpdateEnumerationTypePayload

  """Updates a single `Equipment` using a unique key and a patch."""
  updateEquipment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEquipmentInput!
  ): UpdateEquipmentPayload

  """Updates a single `EquipmentType` using a unique key and a patch."""
  updateEquipmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEquipmentTypeInput!
  ): UpdateEquipmentTypePayload

  """Updates a single `LedgerEntry` using a unique key and a patch."""
  updateLedgerEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLedgerEntryInput!
  ): UpdateLedgerEntryPayload

  """Updates a single `Library` using a unique key and a patch."""
  updateLibrary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLibraryInput!
  ): UpdateLibraryPayload

  """Updates a single `MeasurementUnit` using a unique key and a patch."""
  updateMeasurementUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMeasurementUnitInput!
  ): UpdateMeasurementUnitPayload

  """Updates a single `Object` using a unique key and a patch."""
  updateObject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateObjectInput!
  ): UpdateObjectPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Place` using a unique key and a patch."""
  updatePlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaceInput!
  ): UpdatePlacePayload

  """Updates a single `Quantity` using a unique key and a patch."""
  updateQuantity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateQuantityInput!
  ): UpdateQuantityPayload

  """Updates a single `RelationshipType` using a unique key and a patch."""
  updateRelationshipType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationshipTypeInput!
  ): UpdateRelationshipTypePayload

  """Updates a single `Relationship` using a unique key and a patch."""
  updateRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelationshipInput!
  ): UpdateRelationshipPayload

  """Updates a single `Script` using a unique key and a patch."""
  updateScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScriptInput!
  ): UpdateScriptPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `TiqType` using a unique key and a patch."""
  updateTiqType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTiqTypeInput!
  ): UpdateTiqTypePayload

  """Updates a single `Transaction` using a unique key and a patch."""
  updateTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTransactionInput!
  ): UpdateTransactionPayload

  """Updates a single `TypeToAttributeType` using a unique key and a patch."""
  updateTypeToAttributeType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeToAttributeTypeInput!
  ): UpdateTypeToAttributeTypePayload

  """Updates a single `TypeToChildType` using a unique key and a patch."""
  updateTypeToChildType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTypeToChildTypeInput!
  ): UpdateTypeToChildTypePayload

  """Deletes a single `Account` using a unique key."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `AttributeLimit` using a unique key."""
  deleteAttributeLimit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttributeLimitInput!
  ): DeleteAttributeLimitPayload

  """Deletes a single `Attribute` using a unique key."""
  deleteAttribute(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttributeInput!
  ): DeleteAttributePayload

  """Deletes a single `Connector` using a unique key."""
  deleteConnector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConnectorInput!
  ): DeleteConnectorPayload

  """Deletes a single `EnumerationType` using a unique key."""
  deleteEnumerationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnumerationTypeInput!
  ): DeleteEnumerationTypePayload

  """Deletes a single `Equipment` using a unique key."""
  deleteEquipment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEquipmentInput!
  ): DeleteEquipmentPayload

  """Deletes a single `EquipmentType` using a unique key."""
  deleteEquipmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEquipmentTypeInput!
  ): DeleteEquipmentTypePayload

  """Deletes a single `LedgerEntry` using a unique key."""
  deleteLedgerEntry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLedgerEntryInput!
  ): DeleteLedgerEntryPayload

  """Deletes a single `Library` using a unique key."""
  deleteLibrary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLibraryInput!
  ): DeleteLibraryPayload

  """Deletes a single `MeasurementUnit` using a unique key."""
  deleteMeasurementUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMeasurementUnitInput!
  ): DeleteMeasurementUnitPayload

  """Deletes a single `Object` using a unique key."""
  deleteObject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteObjectInput!
  ): DeleteObjectPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Place` using a unique key."""
  deletePlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaceInput!
  ): DeletePlacePayload

  """Deletes a single `Quantity` using a unique key."""
  deleteQuantity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteQuantityInput!
  ): DeleteQuantityPayload

  """Deletes a single `RelationshipType` using a unique key."""
  deleteRelationshipType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationshipTypeInput!
  ): DeleteRelationshipTypePayload

  """Deletes a single `Relationship` using a unique key."""
  deleteRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelationshipInput!
  ): DeleteRelationshipPayload

  """Deletes a single `Script` using a unique key."""
  deleteScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScriptInput!
  ): DeleteScriptPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `TiqType` using a unique key."""
  deleteTiqType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTiqTypeInput!
  ): DeleteTiqTypePayload

  """Deletes a single `Transaction` using a unique key."""
  deleteTransaction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTransactionInput!
  ): DeleteTransactionPayload

  """Deletes a single `TypeToAttributeType` using a unique key."""
  deleteTypeToAttributeType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeToAttributeTypeInput!
  ): DeleteTypeToAttributeTypePayload

  """Deletes a single `TypeToChildType` using a unique key."""
  deleteTypeToChildType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTypeToChildTypeInput!
  ): DeleteTypeToChildTypePayload
  replaceTimeSeriesRange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReplaceTimeSeriesRangeInput!
  ): ReplaceTimeSeriesRangePayload
  authenticationRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticationRequestInput!
  ): AuthenticationRequestPayload
  authenticationValidation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticationValidationInput!
  ): AuthenticationValidationPayload
  getAuthenticatorForGraphql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetAuthenticatorForGraphqlInput!
  ): GetAuthenticatorForGraphqlPayload
}

type Object {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  category: String
  documentation: String
  extensions: String

  """For OPC UA Node - the OPC UA NodeId of the parent node."""
  parentNodeId: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String

  """For OPC UA Node - the event notifier of a node."""
  eventNotifier: Int
  memberOfOrganizations: [BigInt]
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Attribute` that is related to this `Object`."""
  referencedByAttribute: Attribute

  """Reads a single `Object` that is related to this `Object`."""
  parentObject: Object

  """Reads a single `Thing` that is related to this `Object`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Object`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Object`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Object`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Object`."""
  childObjects(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Object`."""
    orderBy: [ObjectsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ObjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ObjectFilter
  ): [Object!]!

  """Reads and enables pagination through a set of `Script`."""
  scripts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]!
}

"""
A condition to be used against `Object` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ObjectCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigInt

  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `documentation` field."""
  documentation: String

  """Checks for equality with the object’s `extensions` field."""
  extensions: String

  """Checks for equality with the object’s `parentNodeId` field."""
  parentNodeId: String

  """Checks for equality with the object’s `opcuaNodeId` field."""
  opcuaNodeId: String

  """Checks for equality with the object’s `browseName` field."""
  browseName: String

  """Checks for equality with the object’s `writeMask` field."""
  writeMask: Int

  """Checks for equality with the object’s `userWriteMask` field."""
  userWriteMask: Int

  """Checks for equality with the object’s `accessRestriction` field."""
  accessRestriction: Int

  """Checks for equality with the object’s `hasNoPermissions` field."""
  hasNoPermissions: Boolean

  """Checks for equality with the object’s `symbolicName` field."""
  symbolicName: String

  """Checks for equality with the object’s `releaseStatus` field."""
  releaseStatus: String

  """Checks for equality with the object’s `eventNotifier` field."""
  eventNotifier: Int

  """Checks for equality with the object’s `memberOfOrganizations` field."""
  memberOfOrganizations: [BigInt]

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Object` object types. All fields are combined with a logical ‘and.’
"""
input ObjectFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigIntFilter

  """Filter by the object’s `category` field."""
  category: StringFilter

  """Filter by the object’s `documentation` field."""
  documentation: StringFilter

  """Filter by the object’s `extensions` field."""
  extensions: StringFilter

  """Filter by the object’s `parentNodeId` field."""
  parentNodeId: StringFilter

  """Filter by the object’s `opcuaNodeId` field."""
  opcuaNodeId: StringFilter

  """Filter by the object’s `browseName` field."""
  browseName: StringFilter

  """Filter by the object’s `writeMask` field."""
  writeMask: IntFilter

  """Filter by the object’s `userWriteMask` field."""
  userWriteMask: IntFilter

  """Filter by the object’s `accessRestriction` field."""
  accessRestriction: IntFilter

  """Filter by the object’s `hasNoPermissions` field."""
  hasNoPermissions: BooleanFilter

  """Filter by the object’s `symbolicName` field."""
  symbolicName: StringFilter

  """Filter by the object’s `releaseStatus` field."""
  releaseStatus: StringFilter

  """Filter by the object’s `eventNotifier` field."""
  eventNotifier: IntFilter

  """Filter by the object’s `memberOfOrganizations` field."""
  memberOfOrganizations: BigIntListFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [ObjectFilter!]

  """Checks for any expressions in this list."""
  or: [ObjectFilter!]

  """Negates the expression."""
  not: ObjectFilter
}

"""An input for mutations affecting `Object`"""
input ObjectInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  category: String
  documentation: String
  extensions: String

  """For OPC UA Node - the OPC UA NodeId of the parent node."""
  parentNodeId: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String

  """For OPC UA Node - the event notifier of a node."""
  eventNotifier: Int
  memberOfOrganizations: [BigInt]
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Object`. Fields that are set will be updated.
"""
input ObjectPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  category: String
  documentation: String
  extensions: String

  """For OPC UA Node - the OPC UA NodeId of the parent node."""
  parentNodeId: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String

  """For OPC UA Node - the event notifier of a node."""
  eventNotifier: Int
  memberOfOrganizations: [BigInt]
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Object`."""
enum ObjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  TYPE_TO_CHILD_TYPE_ID_ASC
  TYPE_TO_CHILD_TYPE_ID_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  DOCUMENTATION_ASC
  DOCUMENTATION_DESC
  EXTENSIONS_ASC
  EXTENSIONS_DESC
  PARENT_NODE_ID_ASC
  PARENT_NODE_ID_DESC
  OPCUA_NODE_ID_ASC
  OPCUA_NODE_ID_DESC
  BROWSE_NAME_ASC
  BROWSE_NAME_DESC
  WRITE_MASK_ASC
  WRITE_MASK_DESC
  USER_WRITE_MASK_ASC
  USER_WRITE_MASK_DESC
  ACCESS_RESTRICTION_ASC
  ACCESS_RESTRICTION_DESC
  HAS_NO_PERMISSIONS_ASC
  HAS_NO_PERMISSIONS_DESC
  SYMBOLIC_NAME_ASC
  SYMBOLIC_NAME_DESC
  RELEASE_STATUS_ASC
  RELEASE_STATUS_DESC
  EVENT_NOTIFIER_ASC
  EVENT_NOTIFIER_DESC
  MEMBER_OF_ORGANIZATIONS_ASC
  MEMBER_OF_ORGANIZATIONS_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Organization {
  """Internal ID, auto incrementing"""
  id: BigInt!
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Organization` that is related to this `Organization`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Organization`."""
  asThing: Thing

  """
  Reads a single `TypeToChildType` that is related to this `Organization`.
  """
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Organization`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Organization`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Organization`."""
  childOrganizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): [Organization!]!

  """Reads and enables pagination through a set of `Place`."""
  childPlaces(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isRoot` field."""
  isRoot: Boolean

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigInt

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `isRoot` field."""
  isRoot: BooleanFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigIntFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Negates the expression."""
  not: OrganizationFilter
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IS_ROOT_ASC
  IS_ROOT_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  TYPE_TO_CHILD_TYPE_ID_ASC
  TYPE_TO_CHILD_TYPE_ID_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Place {
  """Internal ID, auto incrementing"""
  id: BigInt!
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Place` that is related to this `Place`."""
  parentPlace: Place

  """Reads a single `Organization` that is related to this `Place`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Place`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Place`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Place`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Place`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Equipment`."""
  equipment(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!

  """Reads and enables pagination through a set of `Place`."""
  childPlaces(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]!
}

"""
A condition to be used against `Place` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlaceCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `isRoot` field."""
  isRoot: Boolean

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigInt

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Place` object types. All fields are combined with a logical ‘and.’
"""
input PlaceFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `isRoot` field."""
  isRoot: BooleanFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `typeToChildTypeId` field."""
  typeToChildTypeId: BigIntFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [PlaceFilter!]

  """Checks for any expressions in this list."""
  or: [PlaceFilter!]

  """Negates the expression."""
  not: PlaceFilter
}

"""An input for mutations affecting `Place`"""
input PlaceInput {
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Place`. Fields that are set will be updated.
"""
input PlacePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  isRoot: Boolean
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean

  """Internal ID, auto incrementing"""
  typeToChildTypeId: BigInt
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Place`."""
enum PlacesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IS_ROOT_ASC
  IS_ROOT_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  TYPE_TO_CHILD_TYPE_ID_ASC
  TYPE_TO_CHILD_TYPE_ID_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Quantity`."""
enum QuantitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  QUANTITY_SYMBOL_ASC
  QUANTITY_SYMBOL_DESC
  LENGTH_DIMENSION_EXPONENT_ASC
  LENGTH_DIMENSION_EXPONENT_DESC
  MASS_DIMENSION_EXPONENT_ASC
  MASS_DIMENSION_EXPONENT_DESC
  TIME_DIMENSION_EXPONENT_ASC
  TIME_DIMENSION_EXPONENT_DESC
  ELECTRIC_CURRENT_DIMENSION_EXPONENT_ASC
  ELECTRIC_CURRENT_DIMENSION_EXPONENT_DESC
  THERMODYNAMIC_TEMPERATURE_DIMENSION_EXPONENT_ASC
  THERMODYNAMIC_TEMPERATURE_DIMENSION_EXPONENT_DESC
  AMOUNT_OF_SUBSTANCE_DIMENSION_EXPONENT_ASC
  AMOUNT_OF_SUBSTANCE_DIMENSION_EXPONENT_DESC
  LUMINOUS_INTENSITY_DIMENSION_EXPONENT_ASC
  LUMINOUS_INTENSITY_DIMENSION_EXPONENT_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Quantity {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """
  The quantity symbol is used in equations. Example F=M*A for Force = Mass * Acceleration.
  """
  quantitySymbol: String

  """Length dimension exponent."""
  lengthDimensionExponent: Int

  """Mass dimension exponent."""
  massDimensionExponent: Int

  """Time, duration dimension exponent."""
  timeDimensionExponent: Int

  """Electric current dimension exponent."""
  electricCurrentDimensionExponent: Int

  """Thermodynamic temperature dimension exponent."""
  thermodynamicTemperatureDimensionExponent: Int

  """Amount of substance dimension exponent."""
  amountOfSubstanceDimensionExponent: Int

  """Luminous intensity dimension exponent."""
  luminousIntensityDimensionExponent: Int
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Thing` that is related to this `Quantity`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Quantity`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Quantity`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `MeasurementUnit`."""
  measurementUnits(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MeasurementUnit`."""
    orderBy: [MeasurementUnitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasurementUnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasurementUnitFilter
  ): [MeasurementUnit!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!
}

"""
A condition to be used against `Quantity` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input QuantityCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `quantitySymbol` field."""
  quantitySymbol: String

  """Checks for equality with the object’s `lengthDimensionExponent` field."""
  lengthDimensionExponent: Int

  """Checks for equality with the object’s `massDimensionExponent` field."""
  massDimensionExponent: Int

  """Checks for equality with the object’s `timeDimensionExponent` field."""
  timeDimensionExponent: Int

  """
  Checks for equality with the object’s `electricCurrentDimensionExponent` field.
  """
  electricCurrentDimensionExponent: Int

  """
  Checks for equality with the object’s `thermodynamicTemperatureDimensionExponent` field.
  """
  thermodynamicTemperatureDimensionExponent: Int

  """
  Checks for equality with the object’s `amountOfSubstanceDimensionExponent` field.
  """
  amountOfSubstanceDimensionExponent: Int

  """
  Checks for equality with the object’s `luminousIntensityDimensionExponent` field.
  """
  luminousIntensityDimensionExponent: Int

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Quantity` object types. All fields are combined with a logical ‘and.’
"""
input QuantityFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `quantitySymbol` field."""
  quantitySymbol: StringFilter

  """Filter by the object’s `lengthDimensionExponent` field."""
  lengthDimensionExponent: IntFilter

  """Filter by the object’s `massDimensionExponent` field."""
  massDimensionExponent: IntFilter

  """Filter by the object’s `timeDimensionExponent` field."""
  timeDimensionExponent: IntFilter

  """Filter by the object’s `electricCurrentDimensionExponent` field."""
  electricCurrentDimensionExponent: IntFilter

  """
  Filter by the object’s `thermodynamicTemperatureDimensionExponent` field.
  """
  thermodynamicTemperatureDimensionExponent: IntFilter

  """Filter by the object’s `amountOfSubstanceDimensionExponent` field."""
  amountOfSubstanceDimensionExponent: IntFilter

  """Filter by the object’s `luminousIntensityDimensionExponent` field."""
  luminousIntensityDimensionExponent: IntFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [QuantityFilter!]

  """Checks for any expressions in this list."""
  or: [QuantityFilter!]

  """Negates the expression."""
  not: QuantityFilter
}

"""An input for mutations affecting `Quantity`"""
input QuantityInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """
  The quantity symbol is used in equations. Example F=M*A for Force = Mass * Acceleration.
  """
  quantitySymbol: String

  """Length dimension exponent."""
  lengthDimensionExponent: Int

  """Mass dimension exponent."""
  massDimensionExponent: Int

  """Time, duration dimension exponent."""
  timeDimensionExponent: Int

  """Electric current dimension exponent."""
  electricCurrentDimensionExponent: Int

  """Thermodynamic temperature dimension exponent."""
  thermodynamicTemperatureDimensionExponent: Int

  """Amount of substance dimension exponent."""
  amountOfSubstanceDimensionExponent: Int

  """Luminous intensity dimension exponent."""
  luminousIntensityDimensionExponent: Int
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `Quantity`. Fields that are set will be updated.
"""
input QuantityPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """
  The quantity symbol is used in equations. Example F=M*A for Force = Mass * Acceleration.
  """
  quantitySymbol: String

  """Length dimension exponent."""
  lengthDimensionExponent: Int

  """Mass dimension exponent."""
  massDimensionExponent: Int

  """Time, duration dimension exponent."""
  timeDimensionExponent: Int

  """Electric current dimension exponent."""
  electricCurrentDimensionExponent: Int

  """Thermodynamic temperature dimension exponent."""
  thermodynamicTemperatureDimensionExponent: Int

  """Amount of substance dimension exponent."""
  amountOfSubstanceDimensionExponent: Int

  """Luminous intensity dimension exponent."""
  luminousIntensityDimensionExponent: Int
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]

  """Reads a set of `AttributeLimit`."""
  attributeLimits(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AttributeLimit`."""
    orderBy: [AttributeLimitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeLimitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeLimitFilter
  ): [AttributeLimit!]

  """Reads a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]

  """Reads a set of `Connector`."""
  connectors(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Connector`."""
    orderBy: [ConnectorsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConnectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConnectorFilter
  ): [Connector!]

  """Reads a set of `CurrentValue`."""
  currentValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CurrentValue`."""
    orderBy: [CurrentValuesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CurrentValueCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CurrentValueFilter
  ): [CurrentValue!]

  """Reads a set of `EnumerationType`."""
  enumerationTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EnumerationType`."""
    orderBy: [EnumerationTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnumerationTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnumerationTypeFilter
  ): [EnumerationType!]

  """Reads a set of `Equipment`."""
  equipments(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]

  """Reads a set of `EquipmentType`."""
  equipmentTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EquipmentType`."""
    orderBy: [EquipmentTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentTypeFilter
  ): [EquipmentType!]

  """Reads a set of `LedgerEntry`."""
  ledgerEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LedgerEntry`."""
    orderBy: [LedgerEntriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LedgerEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LedgerEntryFilter
  ): [LedgerEntry!]

  """Reads a set of `Library`."""
  libraries(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Library`."""
    orderBy: [LibrariesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LibraryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LibraryFilter
  ): [Library!]

  """Reads a set of `MeasurementUnit`."""
  measurementUnits(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MeasurementUnit`."""
    orderBy: [MeasurementUnitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasurementUnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasurementUnitFilter
  ): [MeasurementUnit!]

  """Reads a set of `Object`."""
  objects(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Object`."""
    orderBy: [ObjectsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ObjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ObjectFilter
  ): [Object!]

  """Reads a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): [Organization!]

  """Reads a set of `Place`."""
  places(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]

  """Reads a set of `Quantity`."""
  quantities(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Quantity`."""
    orderBy: [QuantitiesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuantityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuantityFilter
  ): [Quantity!]

  """Reads a set of `RelationshipType`."""
  relationshipTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RelationshipType`."""
    orderBy: [RelationshipTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipTypeFilter
  ): [RelationshipType!]

  """Reads a set of `Relationship`."""
  relationships(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipFilter
  ): [Relationship!]

  """Reads a set of `Script`."""
  scripts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]

  """Reads a set of `Tag`."""
  tags(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]

  """Reads a set of `Thing`."""
  things(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ThingFilter
  ): [Thing!]

  """Reads a set of `TiqType`."""
  tiqTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TiqType`."""
    orderBy: [TiqTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TiqTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TiqTypeFilter
  ): [TiqType!]

  """Reads a set of `Transaction`."""
  transactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionFilter
  ): [Transaction!]

  """Reads a set of `TypeToAttributeType`."""
  typeToAttributeTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]

  """Reads a set of `TypeToChildType`."""
  typeToChildTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToChildType`."""
    orderBy: [TypeToChildTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToChildTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToChildTypeFilter
  ): [TypeToChildType!]
  account(id: BigInt!): Account
  attributeLimit(id: BigInt!): AttributeLimit
  attribute(id: BigInt!): Attribute
  connector(id: BigInt!): Connector
  enumerationType(id: BigInt!): EnumerationType
  equipment(id: BigInt!): Equipment
  equipmentType(id: BigInt!): EquipmentType
  ledgerEntry(id: BigInt!): LedgerEntry
  library(id: BigInt!): Library
  measurementUnit(id: BigInt!): MeasurementUnit
  object(id: BigInt!): Object
  organization(id: BigInt!): Organization
  place(id: BigInt!): Place
  quantity(id: BigInt!): Quantity
  relationshipType(id: BigInt!): RelationshipType
  relationship(id: BigInt!): Relationship
  script(id: BigInt!): Script
  tag(id: BigInt!): Tag
  tiqType(id: BigInt!): TiqType
  transaction(id: BigInt!): Transaction
  typeToAttributeType(id: BigInt!): TypeToAttributeType
  typeToChildType(id: BigInt!): TypeToChildType
  getRawHistoryDataWithSampling(
    ids: [BigInt]
    startTime: Datetime
    endTime: Datetime
    maxSamples: Int
    flags: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GetRawHistoryDataWithSamplingRecordFilter
  ): [GetRawHistoryDataWithSamplingRecord]
}

type Relationship {
  """Internal ID, auto incrementing"""
  id: BigInt!

  """The local name of this node. Unique within the part of node."""
  relativeName: String
  systemType: String
  typeName: String
  description: String
  typeId: BigInt

  """Internal ID, auto incrementing"""
  partOfId: BigInt
  createdTimestamp: Datetime
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int

  """Internal ID, auto incrementing"""
  objectId: BigInt

  """Internal ID, auto incrementing"""
  relationshipTypeId: BigInt
  relationshipTypeName: String

  """Internal ID, auto incrementing"""
  subjectId: BigInt
  active: Boolean
  importance: Float

  """Reads a single `Thing` that is related to this `Relationship`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  subject: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  object: Thing

  """
  Reads a single `RelationshipType` that is related to this `Relationship`.
  """
  relationshipType: RelationshipType
}

"""
A condition to be used against `Relationship` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationshipCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `objectId` field."""
  objectId: BigInt

  """Checks for equality with the object’s `relationshipTypeId` field."""
  relationshipTypeId: BigInt

  """Checks for equality with the object’s `relationshipTypeName` field."""
  relationshipTypeName: String

  """Checks for equality with the object’s `subjectId` field."""
  subjectId: BigInt

  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float
}

"""
A filter to be used against `Relationship` object types. All fields are combined with a logical ‘and.’
"""
input RelationshipFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `objectId` field."""
  objectId: BigIntFilter

  """Filter by the object’s `relationshipTypeId` field."""
  relationshipTypeId: BigIntFilter

  """Filter by the object’s `relationshipTypeName` field."""
  relationshipTypeName: StringFilter

  """Filter by the object’s `subjectId` field."""
  subjectId: BigIntFilter

  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Checks for all expressions in this list."""
  and: [RelationshipFilter!]

  """Checks for any expressions in this list."""
  or: [RelationshipFilter!]

  """Negates the expression."""
  not: RelationshipFilter
}

"""An input for mutations affecting `Relationship`"""
input RelationshipInput {
  """The local name of this node. Unique within the part of node."""
  relativeName: String
  systemType: String
  typeName: String
  description: String
  typeId: BigInt

  """Internal ID, auto incrementing"""
  partOfId: BigInt

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int

  """Internal ID, auto incrementing"""
  objectId: BigInt

  """Internal ID, auto incrementing"""
  relationshipTypeId: BigInt
  relationshipTypeName: String

  """Internal ID, auto incrementing"""
  subjectId: BigInt
  active: Boolean
  importance: Float
}

"""
Represents an update to a `Relationship`. Fields that are set will be updated.
"""
input RelationshipPatch {
  """Internal ID, auto incrementing"""
  id: BigInt

  """The local name of this node. Unique within the part of node."""
  relativeName: String
  systemType: String
  typeName: String
  description: String
  typeId: BigInt

  """Internal ID, auto incrementing"""
  partOfId: BigInt

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int

  """Internal ID, auto incrementing"""
  objectId: BigInt

  """Internal ID, auto incrementing"""
  relationshipTypeId: BigInt
  relationshipTypeName: String

  """Internal ID, auto incrementing"""
  subjectId: BigInt
  active: Boolean
  importance: Float
}

"""Methods to use when ordering `Relationship`."""
enum RelationshipsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  OBJECT_ID_ASC
  OBJECT_ID_DESC
  RELATIONSHIP_TYPE_ID_ASC
  RELATIONSHIP_TYPE_ID_DESC
  RELATIONSHIP_TYPE_NAME_ASC
  RELATIONSHIP_TYPE_NAME_DESC
  SUBJECT_ID_ASC
  SUBJECT_ID_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RelationshipType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  relationshipTypeNodes: [RelationshipTypeNode]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `RelationshipType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipFilter
  ): [Relationship!]!
}

"""
A condition to be used against `RelationshipType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationshipTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `relationshipTypeNodes` field."""
  relationshipTypeNodes: [RelationshipTypeNodeInput]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `RelationshipType` object types. All fields are combined with a logical ‘and.’
"""
input RelationshipTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [RelationshipTypeFilter!]

  """Checks for any expressions in this list."""
  or: [RelationshipTypeFilter!]

  """Negates the expression."""
  not: RelationshipTypeFilter
}

"""An input for mutations affecting `RelationshipType`"""
input RelationshipTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  relationshipTypeNodes: [RelationshipTypeNodeInput]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

type RelationshipTypeNode {
  subjectNodeTypeId: BigInt
  objectNodeTypeId: BigInt
  objectReferenceType: String
}

"""An input for mutations affecting `RelationshipTypeNode`"""
input RelationshipTypeNodeInput {
  subjectNodeTypeId: BigInt
  objectNodeTypeId: BigInt
  objectReferenceType: String
}

"""
Represents an update to a `RelationshipType`. Fields that are set will be updated.
"""
input RelationshipTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  relationshipTypeNodes: [RelationshipTypeNodeInput]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `RelationshipType`."""
enum RelationshipTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  SOURCE_CREATED_TIMESTAMP_ASC
  SOURCE_CREATED_TIMESTAMP_DESC
  SOURCE_UPDATED_TIMESTAMP_ASC
  SOURCE_UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  RELATIONSHIP_TYPE_NODES_ASC
  RELATIONSHIP_TYPE_NODES_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `replaceTimeSeriesRange` mutation."""
input ReplaceTimeSeriesRangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  attributeOrTagId: BigInt
  entries: [TimeSeriesEntryInput]
  startTime: Datetime
  endTime: Datetime
}

"""The output of our `replaceTimeSeriesRange` mutation."""
type ReplaceTimeSeriesRangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum ScalarTypeEnum {
  BOOL
  INT
  FLOAT
  STRING
  DATETIME
  INTERVAL
  OBJECT
  ENUMERATION
  GEOPOINT
  REFERENCE
}

"""
A filter to be used against ScalarTypeEnum fields. All fields are combined with a logical ‘and.’
"""
input ScalarTypeEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ScalarTypeEnum

  """Not equal to the specified value."""
  notEqualTo: ScalarTypeEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ScalarTypeEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ScalarTypeEnum

  """Included in the specified list."""
  in: [ScalarTypeEnum!]

  """Not included in the specified list."""
  notIn: [ScalarTypeEnum!]

  """Less than the specified value."""
  lessThan: ScalarTypeEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ScalarTypeEnum

  """Greater than the specified value."""
  greaterThan: ScalarTypeEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ScalarTypeEnum
}

type Script {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Script language such as python, php, sql"""
  scriptType: ScriptTypeEnum

  """Script code"""
  script: String

  """Specifies the output type of the script."""
  outputType: ScriptOutputTypeEnum

  """
  A cron expression stored as text. Adheres to the rules that support seconds.
  See https://www.freeformatter.com/cron-expression-generator-quartz.html.
  """
  cronExpression: String

  """Initial inputs passed to the script"""
  initialInputs: JSON

  """
  Specifies whether to pass the outputs from the last run to the next run. When
  false, the initial_inputs are passed to every run.
  """
  useOutputsFromLastRun: Boolean

  """
  Specifies whether to run the script. This is a switch to turn the script on and off in conjunction with cron_expression.
  """
  run: Boolean

  """
  Number of seconds, which a script is unscheduled if its execution time exceeds.
  """
  maxAcceptableRunSecs: Int

  """
  If true and part_of_id is a type, then execute on instances of all derived types as well as instances of this type.
  """
  execOnDerived: Boolean

  """Is the client user name."""
  owner: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `Library` that is related to this `Script`."""
  onLibrary: Library

  """Reads a single `TiqType` that is related to this `Script`."""
  onType: TiqType

  """Reads a single `Object` that is related to this `Script`."""
  onObject: Object

  """Reads a single `Thing` that is related to this `Script`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Script`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Script`."""
  partOf: Thing
}

"""
A condition to be used against `Script` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ScriptCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `scriptType` field."""
  scriptType: ScriptTypeEnum

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `outputType` field."""
  outputType: ScriptOutputTypeEnum

  """Checks for equality with the object’s `cronExpression` field."""
  cronExpression: String

  """Checks for equality with the object’s `initialInputs` field."""
  initialInputs: JSON

  """Checks for equality with the object’s `useOutputsFromLastRun` field."""
  useOutputsFromLastRun: Boolean

  """Checks for equality with the object’s `run` field."""
  run: Boolean

  """Checks for equality with the object’s `maxAcceptableRunSecs` field."""
  maxAcceptableRunSecs: Int

  """Checks for equality with the object’s `execOnDerived` field."""
  execOnDerived: Boolean

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Script` object types. All fields are combined with a logical ‘and.’
"""
input ScriptFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `scriptType` field."""
  scriptType: ScriptTypeEnumFilter

  """Filter by the object’s `script` field."""
  script: StringFilter

  """Filter by the object’s `outputType` field."""
  outputType: ScriptOutputTypeEnumFilter

  """Filter by the object’s `cronExpression` field."""
  cronExpression: StringFilter

  """Filter by the object’s `initialInputs` field."""
  initialInputs: JSONFilter

  """Filter by the object’s `useOutputsFromLastRun` field."""
  useOutputsFromLastRun: BooleanFilter

  """Filter by the object’s `run` field."""
  run: BooleanFilter

  """Filter by the object’s `maxAcceptableRunSecs` field."""
  maxAcceptableRunSecs: IntFilter

  """Filter by the object’s `execOnDerived` field."""
  execOnDerived: BooleanFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [ScriptFilter!]

  """Checks for any expressions in this list."""
  or: [ScriptFilter!]

  """Negates the expression."""
  not: ScriptFilter
}

"""An input for mutations affecting `Script`"""
input ScriptInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Script language such as python, php, sql"""
  scriptType: ScriptTypeEnum

  """Script code"""
  script: String

  """Specifies the output type of the script."""
  outputType: ScriptOutputTypeEnum

  """
  A cron expression stored as text. Adheres to the rules that support seconds.
  See https://www.freeformatter.com/cron-expression-generator-quartz.html.
  """
  cronExpression: String

  """Initial inputs passed to the script"""
  initialInputs: JSON

  """
  Specifies whether to pass the outputs from the last run to the next run. When
  false, the initial_inputs are passed to every run.
  """
  useOutputsFromLastRun: Boolean

  """
  Specifies whether to run the script. This is a switch to turn the script on and off in conjunction with cron_expression.
  """
  run: Boolean

  """
  Number of seconds, which a script is unscheduled if its execution time exceeds.
  """
  maxAcceptableRunSecs: Int

  """
  If true and part_of_id is a type, then execute on instances of all derived types as well as instances of this type.
  """
  execOnDerived: Boolean

  """Is the client user name."""
  owner: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

enum ScriptOutputTypeEnum {
  HEADLESS
  CLASS
  BROWSER
  DISPLAY
}

"""
A filter to be used against ScriptOutputTypeEnum fields. All fields are combined with a logical ‘and.’
"""
input ScriptOutputTypeEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ScriptOutputTypeEnum

  """Not equal to the specified value."""
  notEqualTo: ScriptOutputTypeEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ScriptOutputTypeEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ScriptOutputTypeEnum

  """Included in the specified list."""
  in: [ScriptOutputTypeEnum!]

  """Not included in the specified list."""
  notIn: [ScriptOutputTypeEnum!]

  """Less than the specified value."""
  lessThan: ScriptOutputTypeEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ScriptOutputTypeEnum

  """Greater than the specified value."""
  greaterThan: ScriptOutputTypeEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ScriptOutputTypeEnum
}

"""
Represents an update to a `Script`. Fields that are set will be updated.
"""
input ScriptPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Script language such as python, php, sql"""
  scriptType: ScriptTypeEnum

  """Script code"""
  script: String

  """Specifies the output type of the script."""
  outputType: ScriptOutputTypeEnum

  """
  A cron expression stored as text. Adheres to the rules that support seconds.
  See https://www.freeformatter.com/cron-expression-generator-quartz.html.
  """
  cronExpression: String

  """Initial inputs passed to the script"""
  initialInputs: JSON

  """
  Specifies whether to pass the outputs from the last run to the next run. When
  false, the initial_inputs are passed to every run.
  """
  useOutputsFromLastRun: Boolean

  """
  Specifies whether to run the script. This is a switch to turn the script on and off in conjunction with cron_expression.
  """
  run: Boolean

  """
  Number of seconds, which a script is unscheduled if its execution time exceeds.
  """
  maxAcceptableRunSecs: Int

  """
  If true and part_of_id is a type, then execute on instances of all derived types as well as instances of this type.
  """
  execOnDerived: Boolean

  """Is the client user name."""
  owner: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `Script`."""
enum ScriptsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  SOURCE_CREATED_TIMESTAMP_ASC
  SOURCE_CREATED_TIMESTAMP_DESC
  SOURCE_UPDATED_TIMESTAMP_ASC
  SOURCE_UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  SCRIPT_TYPE_ASC
  SCRIPT_TYPE_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  OUTPUT_TYPE_ASC
  OUTPUT_TYPE_DESC
  CRON_EXPRESSION_ASC
  CRON_EXPRESSION_DESC
  INITIAL_INPUTS_ASC
  INITIAL_INPUTS_DESC
  USE_OUTPUTS_FROM_LAST_RUN_ASC
  USE_OUTPUTS_FROM_LAST_RUN_DESC
  RUN_ASC
  RUN_DESC
  MAX_ACCEPTABLE_RUN_SECS_ASC
  MAX_ACCEPTABLE_RUN_SECS_DESC
  EXEC_ON_DERIVED_ASC
  EXEC_ON_DERIVED_DESC
  OWNER_ASC
  OWNER_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ScriptTypeEnum {
  PYTHON
  PHP
  SQL
}

"""
A filter to be used against ScriptTypeEnum fields. All fields are combined with a logical ‘and.’
"""
input ScriptTypeEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ScriptTypeEnum

  """Not equal to the specified value."""
  notEqualTo: ScriptTypeEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ScriptTypeEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ScriptTypeEnum

  """Included in the specified list."""
  in: [ScriptTypeEnum!]

  """Not included in the specified list."""
  notIn: [ScriptTypeEnum!]

  """Less than the specified value."""
  lessThan: ScriptTypeEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ScriptTypeEnum

  """Greater than the specified value."""
  greaterThan: ScriptTypeEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ScriptTypeEnum
}

enum SourceCategoryEnum {
  CONFIG
  DYNAMIC
  EXPRESSION
  VISION
}

"""
A filter to be used against SourceCategoryEnum fields. All fields are combined with a logical ‘and.’
"""
input SourceCategoryEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SourceCategoryEnum

  """Not equal to the specified value."""
  notEqualTo: SourceCategoryEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SourceCategoryEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SourceCategoryEnum

  """Included in the specified list."""
  in: [SourceCategoryEnum!]

  """Not included in the specified list."""
  notIn: [SourceCategoryEnum!]

  """Less than the specified value."""
  lessThan: SourceCategoryEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SourceCategoryEnum

  """Greater than the specified value."""
  greaterThan: SourceCategoryEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SourceCategoryEnum
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

type Tag {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  dataType: ScalarTypeEnum
  measurementUnitId: BigInt
  historized: Boolean
  stepped: Boolean
  acquiredFromLastPoint: Boolean

  """Internal ID, auto incrementing"""
  opcGroupId: BigInt
  euMin: Float
  euMax: Float
  instrumentMin: Float
  instrumentMax: Float
  historizing: Boolean
  isArray: Boolean
  trueState: String
  falseState: String

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `CurrentValue` that is related to this `Tag`."""
  currentValue: CurrentValue

  """Reads a single `Connector` that is related to this `Tag`."""
  onConnector: Connector

  """Reads a single `Thing` that is related to this `Tag`."""
  asThing: Thing

  """Reads a single `EnumerationType` that is related to this `Tag`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Tag`."""
  opcGroup: Thing

  """Reads a single `TiqType` that is related to this `Tag`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Tag`."""
  partOf: Thing
  getTimeSeries(
    startTime: Datetime
    endTime: Datetime
    maxSamples: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagsGetTimeSeriesRecordFilter
  ): [TagsGetTimeSeriesRecord]
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `dataType` field."""
  dataType: ScalarTypeEnum

  """Checks for equality with the object’s `measurementUnitId` field."""
  measurementUnitId: BigInt

  """Checks for equality with the object’s `historized` field."""
  historized: Boolean

  """Checks for equality with the object’s `stepped` field."""
  stepped: Boolean

  """Checks for equality with the object’s `acquiredFromLastPoint` field."""
  acquiredFromLastPoint: Boolean

  """Checks for equality with the object’s `opcGroupId` field."""
  opcGroupId: BigInt

  """Checks for equality with the object’s `euMin` field."""
  euMin: Float

  """Checks for equality with the object’s `euMax` field."""
  euMax: Float

  """Checks for equality with the object’s `instrumentMin` field."""
  instrumentMin: Float

  """Checks for equality with the object’s `instrumentMax` field."""
  instrumentMax: Float

  """Checks for equality with the object’s `historizing` field."""
  historizing: Boolean

  """Checks for equality with the object’s `isArray` field."""
  isArray: Boolean

  """Checks for equality with the object’s `trueState` field."""
  trueState: String

  """Checks for equality with the object’s `falseState` field."""
  falseState: String

  """Checks for equality with the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigInt

  """Checks for equality with the object’s `enumerationValues` field."""
  enumerationValues: [String]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Tag` object types. All fields are combined with a logical ‘and.’
"""
input TagFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Filter by the object’s `measurementUnitId` field."""
  measurementUnitId: BigIntFilter

  """Filter by the object’s `historized` field."""
  historized: BooleanFilter

  """Filter by the object’s `stepped` field."""
  stepped: BooleanFilter

  """Filter by the object’s `acquiredFromLastPoint` field."""
  acquiredFromLastPoint: BooleanFilter

  """Filter by the object’s `opcGroupId` field."""
  opcGroupId: BigIntFilter

  """Filter by the object’s `euMin` field."""
  euMin: FloatFilter

  """Filter by the object’s `euMax` field."""
  euMax: FloatFilter

  """Filter by the object’s `instrumentMin` field."""
  instrumentMin: FloatFilter

  """Filter by the object’s `instrumentMax` field."""
  instrumentMax: FloatFilter

  """Filter by the object’s `historizing` field."""
  historizing: BooleanFilter

  """Filter by the object’s `isArray` field."""
  isArray: BooleanFilter

  """Filter by the object’s `trueState` field."""
  trueState: StringFilter

  """Filter by the object’s `falseState` field."""
  falseState: StringFilter

  """Filter by the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigIntFilter

  """Filter by the object’s `enumerationValues` field."""
  enumerationValues: StringListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [TagFilter!]

  """Checks for any expressions in this list."""
  or: [TagFilter!]

  """Negates the expression."""
  not: TagFilter
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  dataType: ScalarTypeEnum
  measurementUnitId: BigInt
  historized: Boolean
  stepped: Boolean
  acquiredFromLastPoint: Boolean

  """Internal ID, auto incrementing"""
  opcGroupId: BigInt
  euMin: Float
  euMax: Float
  instrumentMin: Float
  instrumentMax: Float
  historizing: Boolean
  isArray: Boolean
  trueState: String
  falseState: String

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  dataType: ScalarTypeEnum
  measurementUnitId: BigInt
  historized: Boolean
  stepped: Boolean
  acquiredFromLastPoint: Boolean

  """Internal ID, auto incrementing"""
  opcGroupId: BigInt
  euMin: Float
  euMax: Float
  instrumentMin: Float
  instrumentMax: Float
  historizing: Boolean
  isArray: Boolean
  trueState: String
  falseState: String

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  enumerationValues: [String]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""The return type of our `getTimeSeriesConnection` query."""
type TagsGetTimeSeriesRecord {
  id: BigInt
  status: BigInt
  ts: Datetime
  intvalue: BigInt
  boolvalue: Boolean
  floatvalue: Float
  stringvalue: String
  datetimevalue: Datetime
  intervalvalue: Interval
  objectvalue: JSON
  enumerationvalue: String
  dataType: ScalarTypeEnum
}

"""
A filter to be used against `TagsGetTimeSeriesRecord` object types. All fields are combined with a logical ‘and.’
"""
input TagsGetTimeSeriesRecordFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `status` field."""
  status: BigIntFilter

  """Filter by the object’s `ts` field."""
  ts: DatetimeFilter

  """Filter by the object’s `intvalue` field."""
  intvalue: BigIntFilter

  """Filter by the object’s `boolvalue` field."""
  boolvalue: BooleanFilter

  """Filter by the object’s `floatvalue` field."""
  floatvalue: FloatFilter

  """Filter by the object’s `stringvalue` field."""
  stringvalue: StringFilter

  """Filter by the object’s `datetimevalue` field."""
  datetimevalue: DatetimeFilter

  """Filter by the object’s `intervalvalue` field."""
  intervalvalue: IntervalFilter

  """Filter by the object’s `objectvalue` field."""
  objectvalue: JSONFilter

  """Filter by the object’s `enumerationvalue` field."""
  enumerationvalue: StringFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Checks for all expressions in this list."""
  and: [TagsGetTimeSeriesRecordFilter!]

  """Checks for any expressions in this list."""
  or: [TagsGetTimeSeriesRecordFilter!]

  """Negates the expression."""
  not: TagsGetTimeSeriesRecordFilter
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  MEASUREMENT_UNIT_ID_ASC
  MEASUREMENT_UNIT_ID_DESC
  HISTORIZED_ASC
  HISTORIZED_DESC
  STEPPED_ASC
  STEPPED_DESC
  ACQUIRED_FROM_LAST_POINT_ASC
  ACQUIRED_FROM_LAST_POINT_DESC
  OPC_GROUP_ID_ASC
  OPC_GROUP_ID_DESC
  EU_MIN_ASC
  EU_MIN_DESC
  EU_MAX_ASC
  EU_MAX_DESC
  INSTRUMENT_MIN_ASC
  INSTRUMENT_MIN_DESC
  INSTRUMENT_MAX_ASC
  INSTRUMENT_MAX_DESC
  HISTORIZING_ASC
  HISTORIZING_DESC
  IS_ARRAY_ASC
  IS_ARRAY_DESC
  TRUE_STATE_ASC
  TRUE_STATE_DESC
  FALSE_STATE_ASC
  FALSE_STATE_DESC
  ENUMERATION_TYPE_ID_ASC
  ENUMERATION_TYPE_ID_DESC
  ENUMERATION_VALUES_ASC
  ENUMERATION_VALUES_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Thing {
  """Internal ID, auto incrementing"""
  id: BigInt
  uuid: UUID
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqnList: [String]

  """The fully qualified name of the of this item."""
  fqnId: BigInt

  """The fully qualified name of the parent of this item."""
  parentFqnId: BigInt

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """The date and time the node was created in the source"""
  sourceCreatedTimestamp: Datetime
  sourceUpdatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `TiqType` that is related to this `Thing`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Thing`."""
  partOf: Thing

  """Reads a single `Account` that is related to this `Thing`."""
  asAccount: Account

  """Reads and enables pagination through a set of `Account`."""
  accountsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads a single `AttributeLimit` that is related to this `Thing`."""
  asAttributeLimit: AttributeLimit

  """Reads and enables pagination through a set of `AttributeLimit`."""
  attributeLimitsByTagId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AttributeLimit`."""
    orderBy: [AttributeLimitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeLimitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeLimitFilter
  ): [AttributeLimit!]!

  """Reads and enables pagination through a set of `AttributeLimit`."""
  attributeLimitsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AttributeLimit`."""
    orderBy: [AttributeLimitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeLimitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeLimitFilter
  ): [AttributeLimit!]!

  """Reads a single `Attribute` that is related to this `Thing`."""
  asAttribute: Attribute

  """Reads and enables pagination through a set of `Attribute`."""
  attributesByAttributeTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributesByTagId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads a single `Connector` that is related to this `Thing`."""
  asConnector: Connector

  """Reads and enables pagination through a set of `Connector`."""
  connectorsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Connector`."""
    orderBy: [ConnectorsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConnectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConnectorFilter
  ): [Connector!]!

  """Reads a single `EnumerationType` that is related to this `Thing`."""
  asEnumerationType: EnumerationType

  """Reads and enables pagination through a set of `EnumerationType`."""
  enumerationTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EnumerationType`."""
    orderBy: [EnumerationTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnumerationTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnumerationTypeFilter
  ): [EnumerationType!]!

  """Reads a single `Equipment` that is related to this `Thing`."""
  asEquipment: Equipment

  """Reads and enables pagination through a set of `Equipment`."""
  equipmentByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!

  """Reads and enables pagination through a set of `EquipmentType`."""
  equipmentTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EquipmentType`."""
    orderBy: [EquipmentTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentTypeFilter
  ): [EquipmentType!]!

  """Reads a single `LedgerEntry` that is related to this `Thing`."""
  asLedgerEntry: LedgerEntry

  """Reads and enables pagination through a set of `LedgerEntry`."""
  ledgerEntriesByMaterialId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LedgerEntry`."""
    orderBy: [LedgerEntriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LedgerEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LedgerEntryFilter
  ): [LedgerEntry!]!

  """Reads a single `Library` that is related to this `Thing`."""
  asLibrary: Library

  """Reads a single `MeasurementUnit` that is related to this `Thing`."""
  asMeasurementUnit: MeasurementUnit

  """Reads and enables pagination through a set of `MeasurementUnit`."""
  measurementUnitsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MeasurementUnit`."""
    orderBy: [MeasurementUnitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasurementUnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasurementUnitFilter
  ): [MeasurementUnit!]!

  """Reads a single `Object` that is related to this `Thing`."""
  asObject: Object

  """Reads and enables pagination through a set of `Object`."""
  objectsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Object`."""
    orderBy: [ObjectsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ObjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ObjectFilter
  ): [Object!]!

  """Reads a single `Organization` that is related to this `Thing`."""
  asOrganization: Organization

  """Reads and enables pagination through a set of `Organization`."""
  organizationsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): [Organization!]!

  """Reads a single `Place` that is related to this `Thing`."""
  asPlace: Place

  """Reads and enables pagination through a set of `Place`."""
  placesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]!

  """Reads a single `Quantity` that is related to this `Thing`."""
  asQuantity: Quantity

  """Reads and enables pagination through a set of `Quantity`."""
  quantitiesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Quantity`."""
    orderBy: [QuantitiesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuantityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuantityFilter
  ): [Quantity!]!

  """Reads a single `RelationshipType` that is related to this `Thing`."""
  asRelationshipType: RelationshipType

  """Reads and enables pagination through a set of `RelationshipType`."""
  relationshipTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RelationshipType`."""
    orderBy: [RelationshipTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipTypeFilter
  ): [RelationshipType!]!

  """Reads a single `Relationship` that is related to this `Thing`."""
  asRelationship: Relationship

  """Reads and enables pagination through a set of `Relationship`."""
  relationshipBySubjectId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipFilter
  ): [Relationship!]!

  """Reads and enables pagination through a set of `Relationship`."""
  relationshipByObjectId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipFilter
  ): [Relationship!]!

  """Reads a single `Script` that is related to this `Thing`."""
  asScript: Script

  """Reads and enables pagination through a set of `Script`."""
  scriptsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]!

  """Reads a single `Tag` that is related to this `Thing`."""
  asTag: Tag

  """Reads and enables pagination through a set of `Tag`."""
  tagsByOpcGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]!

  """Reads and enables pagination through a set of `Tag`."""
  tagsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]!

  """Reads and enables pagination through a set of `Thing`."""
  thingsByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ThingFilter
  ): [Thing!]!

  """Reads a single `TiqType` that is related to this `Thing`."""
  asTiqType: TiqType

  """Reads and enables pagination through a set of `TiqType`."""
  tiqTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TiqType`."""
    orderBy: [TiqTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TiqTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TiqTypeFilter
  ): [TiqType!]!

  """Reads a single `Transaction` that is related to this `Thing`."""
  asTransaction: Transaction

  """Reads a single `TypeToAttributeType` that is related to this `Thing`."""
  asTypeToAttributeType: TypeToAttributeType

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByAttributeTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!

  """Reads a single `TypeToChildType` that is related to this `Thing`."""
  asTypeToChildType: TypeToChildType

  """Reads and enables pagination through a set of `TypeToChildType`."""
  typeToChildTypesByPartOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToChildType`."""
    orderBy: [TypeToChildTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToChildTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToChildTypeFilter
  ): [TypeToChildType!]!
}

"""
A condition to be used against `Thing` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ThingCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqnList` field."""
  fqnList: [String]

  """Checks for equality with the object’s `fqnId` field."""
  fqnId: BigInt

  """Checks for equality with the object’s `parentFqnId` field."""
  parentFqnId: BigInt

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: Datetime

  """Checks for equality with the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `Thing` object types. All fields are combined with a logical ‘and.’
"""
input ThingFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqnList` field."""
  fqnList: StringListFilter

  """Filter by the object’s `fqnId` field."""
  fqnId: BigIntFilter

  """Filter by the object’s `parentFqnId` field."""
  parentFqnId: BigIntFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceCreatedTimestamp` field."""
  sourceCreatedTimestamp: DatetimeFilter

  """Filter by the object’s `sourceUpdatedTimestamp` field."""
  sourceUpdatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [ThingFilter!]

  """Checks for any expressions in this list."""
  or: [ThingFilter!]

  """Negates the expression."""
  not: ThingFilter
}

"""Methods to use when ordering `Thing`."""
enum ThingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_LIST_ASC
  FQN_LIST_DESC
  FQN_ID_ASC
  FQN_ID_DESC
  PARENT_FQN_ID_ASC
  PARENT_FQN_ID_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  SOURCE_CREATED_TIMESTAMP_ASC
  SOURCE_CREATED_TIMESTAMP_DESC
  SOURCE_UPDATED_TIMESTAMP_ASC
  SOURCE_UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
}

"""An input for mutations affecting `TimeSeriesEntry`"""
input TimeSeriesEntryInput {
  value: String
  timestamp: Datetime
  status: BigInt
}

type TiqType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  isAbstract: Boolean
  category: String
  documentation: String
  extensions: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `TiqType` that is related to this `TiqType`."""
  superType: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TiqType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TiqType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Account`."""
  accountsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): [Account!]!

  """Reads and enables pagination through a set of `AttributeLimit`."""
  attributeLimitsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AttributeLimit`."""
    orderBy: [AttributeLimitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeLimitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeLimitFilter
  ): [AttributeLimit!]!

  """Reads and enables pagination through a set of `Attribute`."""
  attributesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `Connector`."""
  connectorsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Connector`."""
    orderBy: [ConnectorsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConnectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConnectorFilter
  ): [Connector!]!

  """Reads and enables pagination through a set of `EnumerationType`."""
  enumerationTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EnumerationType`."""
    orderBy: [EnumerationTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnumerationTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnumerationTypeFilter
  ): [EnumerationType!]!

  """Reads and enables pagination through a set of `Equipment`."""
  equipmentByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!

  """Reads a single `EquipmentType` that is related to this `TiqType`."""
  asEquipmentType: EquipmentType

  """Reads and enables pagination through a set of `EquipmentType`."""
  equipmentTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EquipmentType`."""
    orderBy: [EquipmentTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentTypeFilter
  ): [EquipmentType!]!

  """Reads and enables pagination through a set of `EquipmentType`."""
  equipmentTypesBySubTypeOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EquipmentType`."""
    orderBy: [EquipmentTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentTypeFilter
  ): [EquipmentType!]!

  """Reads and enables pagination through a set of `Library`."""
  librariesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Library`."""
    orderBy: [LibrariesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LibraryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LibraryFilter
  ): [Library!]!

  """Reads and enables pagination through a set of `MeasurementUnit`."""
  measurementUnitsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MeasurementUnit`."""
    orderBy: [MeasurementUnitsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MeasurementUnitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MeasurementUnitFilter
  ): [MeasurementUnit!]!

  """Reads and enables pagination through a set of `Object`."""
  objectsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Object`."""
    orderBy: [ObjectsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ObjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ObjectFilter
  ): [Object!]!

  """Reads and enables pagination through a set of `Organization`."""
  organizationsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): [Organization!]!

  """Reads and enables pagination through a set of `Place`."""
  placesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]!

  """Reads and enables pagination through a set of `Quantity`."""
  quantitiesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Quantity`."""
    orderBy: [QuantitiesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: QuantityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: QuantityFilter
  ): [Quantity!]!

  """Reads and enables pagination through a set of `RelationshipType`."""
  relationshipTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RelationshipType`."""
    orderBy: [RelationshipTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RelationshipTypeFilter
  ): [RelationshipType!]!

  """Reads and enables pagination through a set of `Script`."""
  scripts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]!

  """Reads and enables pagination through a set of `Script`."""
  scriptsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScriptFilter
  ): [Script!]!

  """Reads and enables pagination through a set of `Tag`."""
  tagsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter
  ): [Tag!]!

  """Reads and enables pagination through a set of `Thing`."""
  thingsByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ThingFilter
  ): [Thing!]!

  """Reads and enables pagination through a set of `TiqType`."""
  subTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TiqType`."""
    orderBy: [TiqTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TiqTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TiqTypeFilter
  ): [TiqType!]!

  """Reads and enables pagination through a set of `TiqType`."""
  tiqTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TiqType`."""
    orderBy: [TiqTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TiqTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TiqTypeFilter
  ): [TiqType!]!

  """Reads and enables pagination through a set of `TiqType`."""
  tiqTypesBySubTypeOfId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TiqType`."""
    orderBy: [TiqTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TiqTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TiqTypeFilter
  ): [TiqType!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByReferencedObjectTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!

  """Reads and enables pagination through a set of `TypeToChildType`."""
  typeToChildTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToChildType`."""
    orderBy: [TypeToChildTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToChildTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToChildTypeFilter
  ): [TypeToChildType!]!

  """Reads and enables pagination through a set of `TypeToChildType`."""
  typeToChildTypesByTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToChildType`."""
    orderBy: [TypeToChildTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToChildTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToChildTypeFilter
  ): [TypeToChildType!]!

  """Reads and enables pagination through a set of `TypeToChildType`."""
  typeToChildTypesByChildTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToChildType`."""
    orderBy: [TypeToChildTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToChildTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToChildTypeFilter
  ): [TypeToChildType!]!
}

"""
A condition to be used against `TiqType` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TiqTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `subTypeOfId` field."""
  subTypeOfId: BigInt

  """
  Checks for equality with the object’s `taxonomySystemNodeTypeId` field.
  """
  taxonomySystemNodeTypeId: Int

  """Checks for equality with the object’s `materializedSubTypePath` field."""
  materializedSubTypePath: [BigInt]

  """Checks for equality with the object’s `baseSystemType` field."""
  baseSystemType: String

  """Checks for equality with the object’s `isAbstract` field."""
  isAbstract: Boolean

  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `documentation` field."""
  documentation: String

  """Checks for equality with the object’s `extensions` field."""
  extensions: String

  """Checks for equality with the object’s `opcuaNodeId` field."""
  opcuaNodeId: String

  """Checks for equality with the object’s `browseName` field."""
  browseName: String

  """Checks for equality with the object’s `writeMask` field."""
  writeMask: Int

  """Checks for equality with the object’s `userWriteMask` field."""
  userWriteMask: Int

  """Checks for equality with the object’s `accessRestriction` field."""
  accessRestriction: Int

  """Checks for equality with the object’s `hasNoPermissions` field."""
  hasNoPermissions: Boolean

  """Checks for equality with the object’s `symbolicName` field."""
  symbolicName: String

  """Checks for equality with the object’s `releaseStatus` field."""
  releaseStatus: String

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `TiqType` object types. All fields are combined with a logical ‘and.’
"""
input TiqTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `subTypeOfId` field."""
  subTypeOfId: BigIntFilter

  """Filter by the object’s `taxonomySystemNodeTypeId` field."""
  taxonomySystemNodeTypeId: IntFilter

  """Filter by the object’s `materializedSubTypePath` field."""
  materializedSubTypePath: BigIntListFilter

  """Filter by the object’s `baseSystemType` field."""
  baseSystemType: StringFilter

  """Filter by the object’s `isAbstract` field."""
  isAbstract: BooleanFilter

  """Filter by the object’s `category` field."""
  category: StringFilter

  """Filter by the object’s `documentation` field."""
  documentation: StringFilter

  """Filter by the object’s `extensions` field."""
  extensions: StringFilter

  """Filter by the object’s `opcuaNodeId` field."""
  opcuaNodeId: StringFilter

  """Filter by the object’s `browseName` field."""
  browseName: StringFilter

  """Filter by the object’s `writeMask` field."""
  writeMask: IntFilter

  """Filter by the object’s `userWriteMask` field."""
  userWriteMask: IntFilter

  """Filter by the object’s `accessRestriction` field."""
  accessRestriction: IntFilter

  """Filter by the object’s `hasNoPermissions` field."""
  hasNoPermissions: BooleanFilter

  """Filter by the object’s `symbolicName` field."""
  symbolicName: StringFilter

  """Filter by the object’s `releaseStatus` field."""
  releaseStatus: StringFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [TiqTypeFilter!]

  """Checks for any expressions in this list."""
  or: [TiqTypeFilter!]

  """Negates the expression."""
  not: TiqTypeFilter
}

"""An input for mutations affecting `TiqType`"""
input TiqTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  isAbstract: Boolean
  category: String
  documentation: String
  extensions: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `TiqType`. Fields that are set will be updated.
"""
input TiqTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  subTypeOfId: BigInt

  """The system node type that instances of this type belong to."""
  taxonomySystemNodeTypeId: Int

  """The taxonomy path seen from the instance level."""
  materializedSubTypePath: [BigInt]
  baseSystemType: String
  isAbstract: Boolean
  category: String
  documentation: String
  extensions: String
  opcuaNodeId: String
  browseName: String
  writeMask: Int
  userWriteMask: Int
  accessRestriction: Int
  hasNoPermissions: Boolean
  symbolicName: String
  releaseStatus: String
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `TiqType`."""
enum TiqTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  SUB_TYPE_OF_ID_ASC
  SUB_TYPE_OF_ID_DESC
  TAXONOMY_SYSTEM_NODE_TYPE_ID_ASC
  TAXONOMY_SYSTEM_NODE_TYPE_ID_DESC
  MATERIALIZED_SUB_TYPE_PATH_ASC
  MATERIALIZED_SUB_TYPE_PATH_DESC
  BASE_SYSTEM_TYPE_ASC
  BASE_SYSTEM_TYPE_DESC
  IS_ABSTRACT_ASC
  IS_ABSTRACT_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  DOCUMENTATION_ASC
  DOCUMENTATION_DESC
  EXTENSIONS_ASC
  EXTENSIONS_DESC
  OPCUA_NODE_ID_ASC
  OPCUA_NODE_ID_DESC
  BROWSE_NAME_ASC
  BROWSE_NAME_DESC
  WRITE_MASK_ASC
  WRITE_MASK_DESC
  USER_WRITE_MASK_ASC
  USER_WRITE_MASK_DESC
  ACCESS_RESTRICTION_ASC
  ACCESS_RESTRICTION_DESC
  HAS_NO_PERMISSIONS_ASC
  HAS_NO_PERMISSIONS_DESC
  SYMBOLIC_NAME_ASC
  SYMBOLIC_NAME_DESC
  RELEASE_STATUS_ASC
  RELEASE_STATUS_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Transaction {
  id: BigInt!
  document: JSON
  routeIds: [BigInt]

  """Reads a single `Thing` that is related to this `Transaction`."""
  asThing: Thing

  """Reads and enables pagination through a set of `LedgerEntry`."""
  ledgerEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LedgerEntry`."""
    orderBy: [LedgerEntriesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LedgerEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LedgerEntryFilter
  ): [LedgerEntry!]!
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `routeIds` field."""
  routeIds: [BigInt]
}

"""
A filter to be used against `Transaction` object types. All fields are combined with a logical ‘and.’
"""
input TransactionFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `routeIds` field."""
  routeIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [TransactionFilter!]

  """Checks for any expressions in this list."""
  or: [TransactionFilter!]

  """Negates the expression."""
  not: TransactionFilter
}

"""An input for mutations affecting `Transaction`"""
input TransactionInput {
  document: JSON
  routeIds: [BigInt]
}

"""
Represents an update to a `Transaction`. Fields that are set will be updated.
"""
input TransactionPatch {
  id: BigInt
  document: JSON
  routeIds: [BigInt]
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  ROUTE_IDS_ASC
  ROUTE_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TypeToAttributeType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  sourceCategory: SourceCategoryEnum
  defaultBoolValue: Boolean
  defaultIntValue: BigInt
  defaultFloatValue: Float
  defaultStringValue: String
  defaultDatetimeValue: Datetime
  defaultIntervalValue: Interval

  """Internal ID, auto incrementing"""
  defaultMeasurementUnitId: BigInt

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """Internal ID, auto incrementing"""
  baseTypeToAttributeTypeId: BigInt

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attributes based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: Interval
  maxLatencyInterval: Interval
  unlinkRelativeName: Boolean
  defaultObjectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  defaultEnumerationValues: [String]
  defaultEnumerationValue: String
  defaultGeopointValue: String

  """Internal ID, auto incrementing"""
  referencedObjectTypeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  associatedEventIds: [BigInt]
  accessGroupIds: [BigInt]

  """
  Reads a single `EquipmentType` that is related to this `TypeToAttributeType`.
  """
  equipmentType: EquipmentType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  tiqType: TiqType

  """
  Reads a single `MeasurementUnit` that is related to this `TypeToAttributeType`.
  """
  defaultMeasurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  attributeType: Thing

  """
  Reads a single `EnumerationType` that is related to this `TypeToAttributeType`.
  """
  enumerationType: EnumerationType

  """
  Reads a single `Quantity` that is related to this `TypeToAttributeType`.
  """
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `TypeToAttributeType`.
  """
  baseTypeToAttributeType: TypeToAttributeType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  type: TiqType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  referencedObjectType: TiqType

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttributeFilter
  ): [Attribute!]!

  """Reads and enables pagination through a set of `TypeToAttributeType`."""
  typeToAttributeTypesByBaseTypeToAttributeTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TypeToAttributeType`."""
    orderBy: [TypeToAttributeTypesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TypeToAttributeTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TypeToAttributeTypeFilter
  ): [TypeToAttributeType!]!
}

"""
A condition to be used against `TypeToAttributeType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TypeToAttributeTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `attributeTypeId` field."""
  attributeTypeId: BigInt

  """Checks for equality with the object’s `sourceCategory` field."""
  sourceCategory: SourceCategoryEnum

  """Checks for equality with the object’s `defaultBoolValue` field."""
  defaultBoolValue: Boolean

  """Checks for equality with the object’s `defaultIntValue` field."""
  defaultIntValue: BigInt

  """Checks for equality with the object’s `defaultFloatValue` field."""
  defaultFloatValue: Float

  """Checks for equality with the object’s `defaultStringValue` field."""
  defaultStringValue: String

  """Checks for equality with the object’s `defaultDatetimeValue` field."""
  defaultDatetimeValue: Datetime

  """Checks for equality with the object’s `defaultIntervalValue` field."""
  defaultIntervalValue: IntervalInput

  """
  Checks for equality with the object’s `defaultMeasurementUnitId` field.
  """
  defaultMeasurementUnitId: BigInt

  """Checks for equality with the object’s `isRequired` field."""
  isRequired: Boolean

  """Checks for equality with the object’s `dataType` field."""
  dataType: ScalarTypeEnum

  """Checks for equality with the object’s `quantityId` field."""
  quantityId: BigInt

  """
  Checks for equality with the object’s `baseTypeToAttributeTypeId` field.
  """
  baseTypeToAttributeTypeId: BigInt

  """Checks for equality with the object’s `interpolationMethod` field."""
  interpolationMethod: InterpolationMethodEnum

  """Checks for equality with the object’s `expression` field."""
  expression: String

  """Checks for equality with the object’s `minValue` field."""
  minValue: Float

  """Checks for equality with the object’s `maxValue` field."""
  maxValue: Float

  """Checks for equality with the object’s `decimalPlaces` field."""
  decimalPlaces: Int

  """Checks for equality with the object’s `isHidden` field."""
  isHidden: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `expirationInterval` field."""
  expirationInterval: IntervalInput

  """Checks for equality with the object’s `maxLatencyInterval` field."""
  maxLatencyInterval: IntervalInput

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `defaultObjectValue` field."""
  defaultObjectValue: JSON

  """Checks for equality with the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigInt

  """
  Checks for equality with the object’s `defaultEnumerationValues` field.
  """
  defaultEnumerationValues: [String]

  """Checks for equality with the object’s `defaultEnumerationValue` field."""
  defaultEnumerationValue: String

  """Checks for equality with the object’s `defaultGeopointValue` field."""
  defaultGeopointValue: String

  """Checks for equality with the object’s `referencedObjectTypeId` field."""
  referencedObjectTypeId: BigInt

  """Checks for equality with the object’s `icon` field."""
  icon: String

  """Checks for equality with the object’s `objectHistoryTypeId` field."""
  objectHistoryTypeId: BigInt

  """Checks for equality with the object’s `associatedEventIds` field."""
  associatedEventIds: [BigInt]

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `TypeToAttributeType` object types. All fields are combined with a logical ‘and.’
"""
input TypeToAttributeTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `attributeTypeId` field."""
  attributeTypeId: BigIntFilter

  """Filter by the object’s `sourceCategory` field."""
  sourceCategory: SourceCategoryEnumFilter

  """Filter by the object’s `defaultBoolValue` field."""
  defaultBoolValue: BooleanFilter

  """Filter by the object’s `defaultIntValue` field."""
  defaultIntValue: BigIntFilter

  """Filter by the object’s `defaultFloatValue` field."""
  defaultFloatValue: FloatFilter

  """Filter by the object’s `defaultStringValue` field."""
  defaultStringValue: StringFilter

  """Filter by the object’s `defaultDatetimeValue` field."""
  defaultDatetimeValue: DatetimeFilter

  """Filter by the object’s `defaultIntervalValue` field."""
  defaultIntervalValue: IntervalFilter

  """Filter by the object’s `defaultMeasurementUnitId` field."""
  defaultMeasurementUnitId: BigIntFilter

  """Filter by the object’s `isRequired` field."""
  isRequired: BooleanFilter

  """Filter by the object’s `dataType` field."""
  dataType: ScalarTypeEnumFilter

  """Filter by the object’s `quantityId` field."""
  quantityId: BigIntFilter

  """Filter by the object’s `baseTypeToAttributeTypeId` field."""
  baseTypeToAttributeTypeId: BigIntFilter

  """Filter by the object’s `interpolationMethod` field."""
  interpolationMethod: InterpolationMethodEnumFilter

  """Filter by the object’s `expression` field."""
  expression: StringFilter

  """Filter by the object’s `minValue` field."""
  minValue: FloatFilter

  """Filter by the object’s `maxValue` field."""
  maxValue: FloatFilter

  """Filter by the object’s `decimalPlaces` field."""
  decimalPlaces: IntFilter

  """Filter by the object’s `isHidden` field."""
  isHidden: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `expirationInterval` field."""
  expirationInterval: IntervalFilter

  """Filter by the object’s `maxLatencyInterval` field."""
  maxLatencyInterval: IntervalFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `defaultObjectValue` field."""
  defaultObjectValue: JSONFilter

  """Filter by the object’s `enumerationTypeId` field."""
  enumerationTypeId: BigIntFilter

  """Filter by the object’s `defaultEnumerationValues` field."""
  defaultEnumerationValues: StringListFilter

  """Filter by the object’s `defaultEnumerationValue` field."""
  defaultEnumerationValue: StringFilter

  """Filter by the object’s `referencedObjectTypeId` field."""
  referencedObjectTypeId: BigIntFilter

  """Filter by the object’s `icon` field."""
  icon: StringFilter

  """Filter by the object’s `objectHistoryTypeId` field."""
  objectHistoryTypeId: BigIntFilter

  """Filter by the object’s `associatedEventIds` field."""
  associatedEventIds: BigIntListFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [TypeToAttributeTypeFilter!]

  """Checks for any expressions in this list."""
  or: [TypeToAttributeTypeFilter!]

  """Negates the expression."""
  not: TypeToAttributeTypeFilter
}

"""An input for mutations affecting `TypeToAttributeType`"""
input TypeToAttributeTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  sourceCategory: SourceCategoryEnum
  defaultBoolValue: Boolean
  defaultIntValue: BigInt
  defaultFloatValue: Float
  defaultStringValue: String
  defaultDatetimeValue: Datetime
  defaultIntervalValue: IntervalInput

  """Internal ID, auto incrementing"""
  defaultMeasurementUnitId: BigInt

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """Internal ID, auto incrementing"""
  baseTypeToAttributeTypeId: BigInt

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attributes based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: IntervalInput
  maxLatencyInterval: IntervalInput
  unlinkRelativeName: Boolean
  defaultObjectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  defaultEnumerationValues: [String]
  defaultEnumerationValue: String
  defaultGeopointValue: String

  """Internal ID, auto incrementing"""
  referencedObjectTypeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  associatedEventIds: [BigInt]
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `TypeToAttributeType`. Fields that are set will be updated.
"""
input TypeToAttributeTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  attributeTypeId: BigInt
  sourceCategory: SourceCategoryEnum
  defaultBoolValue: Boolean
  defaultIntValue: BigInt
  defaultFloatValue: Float
  defaultStringValue: String
  defaultDatetimeValue: Datetime
  defaultIntervalValue: IntervalInput

  """Internal ID, auto incrementing"""
  defaultMeasurementUnitId: BigInt

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean

  """The data type for the attribute type."""
  dataType: ScalarTypeEnum

  """Internal ID, auto incrementing"""
  quantityId: BigInt

  """Internal ID, auto incrementing"""
  baseTypeToAttributeTypeId: BigInt

  """
  Setting the interpolation method determines how the data between the points is interpreted and displayed.
  """
  interpolationMethod: InterpolationMethodEnum

  """
  An expression that is evaluated relative to the node that the attribute is part of.
  """
  expression: String

  """
  The minimum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  minValue: Float

  """
  The maximum value that a user should expect in this attribute. It is commonly
  used for UI purposes such as scaling trends. It does not limit what can be
  stored in the attribute.
  """
  maxValue: Float

  """The number of decimal places to be displayed by default."""
  decimalPlaces: Int

  """Hide attributes based on this one in the UI?"""
  isHidden: Boolean
  importance: Float
  expirationInterval: IntervalInput
  maxLatencyInterval: IntervalInput
  unlinkRelativeName: Boolean
  defaultObjectValue: JSON

  """Internal ID, auto incrementing"""
  enumerationTypeId: BigInt
  defaultEnumerationValues: [String]
  defaultEnumerationValue: String
  defaultGeopointValue: String

  """Internal ID, auto incrementing"""
  referencedObjectTypeId: BigInt
  icon: String
  objectHistoryTypeId: BigInt
  associatedEventIds: [BigInt]
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `TypeToAttributeType`."""
enum TypeToAttributeTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  ATTRIBUTE_TYPE_ID_ASC
  ATTRIBUTE_TYPE_ID_DESC
  SOURCE_CATEGORY_ASC
  SOURCE_CATEGORY_DESC
  DEFAULT_BOOL_VALUE_ASC
  DEFAULT_BOOL_VALUE_DESC
  DEFAULT_INT_VALUE_ASC
  DEFAULT_INT_VALUE_DESC
  DEFAULT_FLOAT_VALUE_ASC
  DEFAULT_FLOAT_VALUE_DESC
  DEFAULT_STRING_VALUE_ASC
  DEFAULT_STRING_VALUE_DESC
  DEFAULT_DATETIME_VALUE_ASC
  DEFAULT_DATETIME_VALUE_DESC
  DEFAULT_INTERVAL_VALUE_ASC
  DEFAULT_INTERVAL_VALUE_DESC
  DEFAULT_MEASUREMENT_UNIT_ID_ASC
  DEFAULT_MEASUREMENT_UNIT_ID_DESC
  IS_REQUIRED_ASC
  IS_REQUIRED_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  QUANTITY_ID_ASC
  QUANTITY_ID_DESC
  BASE_TYPE_TO_ATTRIBUTE_TYPE_ID_ASC
  BASE_TYPE_TO_ATTRIBUTE_TYPE_ID_DESC
  INTERPOLATION_METHOD_ASC
  INTERPOLATION_METHOD_DESC
  EXPRESSION_ASC
  EXPRESSION_DESC
  MIN_VALUE_ASC
  MIN_VALUE_DESC
  MAX_VALUE_ASC
  MAX_VALUE_DESC
  DECIMAL_PLACES_ASC
  DECIMAL_PLACES_DESC
  IS_HIDDEN_ASC
  IS_HIDDEN_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  EXPIRATION_INTERVAL_ASC
  EXPIRATION_INTERVAL_DESC
  MAX_LATENCY_INTERVAL_ASC
  MAX_LATENCY_INTERVAL_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  DEFAULT_OBJECT_VALUE_ASC
  DEFAULT_OBJECT_VALUE_DESC
  ENUMERATION_TYPE_ID_ASC
  ENUMERATION_TYPE_ID_DESC
  DEFAULT_ENUMERATION_VALUES_ASC
  DEFAULT_ENUMERATION_VALUES_DESC
  DEFAULT_ENUMERATION_VALUE_ASC
  DEFAULT_ENUMERATION_VALUE_DESC
  DEFAULT_GEOPOINT_VALUE_ASC
  DEFAULT_GEOPOINT_VALUE_DESC
  REFERENCED_OBJECT_TYPE_ID_ASC
  REFERENCED_OBJECT_TYPE_ID_DESC
  ICON_ASC
  ICON_DESC
  OBJECT_HISTORY_TYPE_ID_ASC
  OBJECT_HISTORY_TYPE_ID_DESC
  ASSOCIATED_EVENT_IDS_ASC
  ASSOCIATED_EVENT_IDS_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TypeToChildType {
  """Internal ID, auto incrementing"""
  id: BigInt!
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """The date and time the node was created in the database"""
  createdTimestamp: Datetime

  """The date and time the node was last updated in the database"""
  updatedTimestamp: Datetime

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  childTypeId: BigInt

  """The minimum number of children."""
  minNumber: Int

  """The maximum number of children."""
  maxNumber: Int

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  tiqType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  childType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  partOf: Thing

  """Reads and enables pagination through a set of `Equipment`."""
  equipments(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Equipment`."""
    orderBy: [EquipmentOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EquipmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EquipmentFilter
  ): [Equipment!]!

  """Reads and enables pagination through a set of `Object`."""
  objects(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Object`."""
    orderBy: [ObjectsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ObjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ObjectFilter
  ): [Object!]!

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): [Organization!]!

  """Reads and enables pagination through a set of `Place`."""
  places(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Place`."""
    orderBy: [PlacesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaceFilter
  ): [Place!]!
}

"""
A condition to be used against `TypeToChildType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TypeToChildTypeCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `systemType` field."""
  systemType: String

  """Checks for equality with the object’s `typeName` field."""
  typeName: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `typeId` field."""
  typeId: BigInt

  """Checks for equality with the object’s `partOfId` field."""
  partOfId: BigInt

  """Checks for equality with the object’s `fqn` field."""
  fqn: [String]

  """Checks for equality with the object’s `relativeName` field."""
  relativeName: String

  """Checks for equality with the object’s `createdTimestamp` field."""
  createdTimestamp: Datetime

  """Checks for equality with the object’s `updatedTimestamp` field."""
  updatedTimestamp: Datetime

  """Checks for equality with the object’s `document` field."""
  document: JSON

  """Checks for equality with the object’s `editStatus` field."""
  editStatus: Int

  """Checks for equality with the object’s `idPath` field."""
  idPath: [BigInt]

  """Checks for equality with the object’s `childTypeId` field."""
  childTypeId: BigInt

  """Checks for equality with the object’s `minNumber` field."""
  minNumber: Int

  """Checks for equality with the object’s `maxNumber` field."""
  maxNumber: Int

  """Checks for equality with the object’s `isRequired` field."""
  isRequired: Boolean

  """Checks for equality with the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: Boolean

  """Checks for equality with the object’s `importance` field."""
  importance: Float

  """Checks for equality with the object’s `accessGroupIds` field."""
  accessGroupIds: [BigInt]
}

"""
A filter to be used against `TypeToChildType` object types. All fields are combined with a logical ‘and.’
"""
input TypeToChildTypeFilter {
  """Filter by the object’s `id` field."""
  id: BigIntFilter

  """Filter by the object’s `systemType` field."""
  systemType: StringFilter

  """Filter by the object’s `typeName` field."""
  typeName: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `typeId` field."""
  typeId: BigIntFilter

  """Filter by the object’s `partOfId` field."""
  partOfId: BigIntFilter

  """Filter by the object’s `fqn` field."""
  fqn: StringListFilter

  """Filter by the object’s `relativeName` field."""
  relativeName: StringFilter

  """Filter by the object’s `createdTimestamp` field."""
  createdTimestamp: DatetimeFilter

  """Filter by the object’s `updatedTimestamp` field."""
  updatedTimestamp: DatetimeFilter

  """Filter by the object’s `document` field."""
  document: JSONFilter

  """Filter by the object’s `editStatus` field."""
  editStatus: IntFilter

  """Filter by the object’s `idPath` field."""
  idPath: BigIntListFilter

  """Filter by the object’s `childTypeId` field."""
  childTypeId: BigIntFilter

  """Filter by the object’s `minNumber` field."""
  minNumber: IntFilter

  """Filter by the object’s `maxNumber` field."""
  maxNumber: IntFilter

  """Filter by the object’s `isRequired` field."""
  isRequired: BooleanFilter

  """Filter by the object’s `unlinkRelativeName` field."""
  unlinkRelativeName: BooleanFilter

  """Filter by the object’s `importance` field."""
  importance: FloatFilter

  """Filter by the object’s `accessGroupIds` field."""
  accessGroupIds: BigIntListFilter

  """Checks for all expressions in this list."""
  and: [TypeToChildTypeFilter!]

  """Checks for any expressions in this list."""
  or: [TypeToChildTypeFilter!]

  """Negates the expression."""
  not: TypeToChildTypeFilter
}

"""An input for mutations affecting `TypeToChildType`"""
input TypeToChildTypeInput {
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  childTypeId: BigInt

  """The minimum number of children."""
  minNumber: Int

  """The maximum number of children."""
  maxNumber: Int

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""
Represents an update to a `TypeToChildType`. Fields that are set will be updated.
"""
input TypeToChildTypePatch {
  """Internal ID, auto incrementing"""
  id: BigInt
  systemType: String
  typeName: String
  displayName: String
  description: String

  """
  An industry library or project specific type. Used for taxonomy hierarchy.
  """
  typeId: BigInt

  """This node is part of another node. Used for meronomy hierarchy."""
  partOfId: BigInt
  fqn: [String]

  """The local name of this node. Unique within the part of node."""
  relativeName: String

  """
  A JSON document hints on how relationships should be wired up.  This allows
  for wiring up of forien keys after the items have been created
  """
  document: JSON
  editStatus: Int
  idPath: [BigInt]

  """Internal ID, auto incrementing"""
  childTypeId: BigInt

  """The minimum number of children."""
  minNumber: Int

  """The maximum number of children."""
  maxNumber: Int

  """Indication if the attribute is required upon instantiation."""
  isRequired: Boolean
  unlinkRelativeName: Boolean
  importance: Float
  accessGroupIds: [BigInt]
}

"""Methods to use when ordering `TypeToChildType`."""
enum TypeToChildTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SYSTEM_TYPE_ASC
  SYSTEM_TYPE_DESC
  TYPE_NAME_ASC
  TYPE_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  PART_OF_ID_ASC
  PART_OF_ID_DESC
  FQN_ASC
  FQN_DESC
  RELATIVE_NAME_ASC
  RELATIVE_NAME_DESC
  CREATED_TIMESTAMP_ASC
  CREATED_TIMESTAMP_DESC
  UPDATED_TIMESTAMP_ASC
  UPDATED_TIMESTAMP_DESC
  DOCUMENT_ASC
  DOCUMENT_DESC
  EDIT_STATUS_ASC
  EDIT_STATUS_DESC
  ID_PATH_ASC
  ID_PATH_DESC
  CHILD_TYPE_ID_ASC
  CHILD_TYPE_ID_DESC
  MIN_NUMBER_ASC
  MIN_NUMBER_DESC
  MAX_NUMBER_ASC
  MAX_NUMBER_DESC
  IS_REQUIRED_ASC
  IS_REQUIRED_DESC
  UNLINK_RELATIVE_NAME_ASC
  UNLINK_RELATIVE_NAME_DESC
  IMPORTANCE_ASC
  IMPORTANCE_DESC
  ACCESS_GROUP_IDS_ASC
  ACCESS_GROUP_IDS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  patch: AccountPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Object` that is related to this `Account`."""
  onObject: Object

  """Reads a single `Equipment` that is related to this `Account`."""
  onEquipment: Equipment

  """Reads a single `Place` that is related to this `Account`."""
  onPlace: Place

  """Reads a single `Organization` that is related to this `Account`."""
  onOrganization: Organization

  """Reads a single `Attribute` that is related to this `Account`."""
  balanceAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Account`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `Account`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Account`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Account`."""
  partOf: Thing
}

"""All input for the `updateAttribute` mutation."""
input UpdateAttributeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attribute` being updated.
  """
  patch: AttributePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""All input for the `updateAttributeLimit` mutation."""
input UpdateAttributeLimitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AttributeLimit` being updated.
  """
  patch: AttributeLimitPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `AttributeLimit` mutation."""
type UpdateAttributeLimitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AttributeLimit` that was updated by this mutation."""
  attributeLimit: AttributeLimit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `AttributeLimit`."""
  onAttribute: Attribute

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  tag: Thing

  """Reads a single `TiqType` that is related to this `AttributeLimit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `AttributeLimit`."""
  partOf: Thing
}

"""The output of our update `Attribute` mutation."""
type UpdateAttributePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attribute` that was updated by this mutation."""
  attribute: Attribute

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Attribute`."""
  currentValue: CurrentValue

  """Reads a single `Attribute` that is related to this `Attribute`."""
  referencedByAttribute: Attribute

  """Reads a single `MeasurementUnit` that is related to this `Attribute`."""
  measurementUnit: MeasurementUnit

  """Reads a single `Equipment` that is related to this `Attribute`."""
  onEquipment: Equipment

  """Reads a single `Object` that is related to this `Attribute`."""
  onObject: Object

  """Reads a single `Organization` that is related to this `Attribute`."""
  onOrganization: Organization

  """Reads a single `Place` that is related to this `Attribute`."""
  onPlace: Place

  """Reads a single `Thing` that is related to this `Attribute`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Attribute`."""
  attributeType: Thing

  """Reads a single `EnumerationType` that is related to this `Attribute`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Attribute`."""
  tag: Thing

  """Reads a single `Quantity` that is related to this `Attribute`."""
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `Attribute`.
  """
  typeToAttributeType: TypeToAttributeType

  """Reads a single `TiqType` that is related to this `Attribute`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Attribute`."""
  partOf: Thing
}

"""All input for the `updateConnector` mutation."""
input UpdateConnectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Connector` being updated.
  """
  patch: ConnectorPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Connector` mutation."""
type UpdateConnectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Connector` that was updated by this mutation."""
  connector: Connector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Connector`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Connector`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Connector`."""
  partOf: Thing
}

"""All input for the `updateEnumerationType` mutation."""
input UpdateEnumerationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnumerationType` being updated.
  """
  patch: EnumerationTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `EnumerationType` mutation."""
type UpdateEnumerationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnumerationType` that was updated by this mutation."""
  enumerationType: EnumerationType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `EnumerationType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `EnumerationType`."""
  partOf: Thing
}

"""All input for the `updateEquipment` mutation."""
input UpdateEquipmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Equipment` being updated.
  """
  patch: EquipmentPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Equipment` mutation."""
type UpdateEquipmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Equipment` that was updated by this mutation."""
  equipment: Equipment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Equipment` that is related to this `Equipment`."""
  parentEquipment: Equipment

  """Reads a single `Place` that is related to this `Equipment`."""
  place: Place

  """Reads a single `EquipmentType` that is related to this `Equipment`."""
  equipmentType: EquipmentType

  """Reads a single `Thing` that is related to this `Equipment`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Equipment`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Equipment`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Equipment`."""
  partOf: Thing
}

"""All input for the `updateEquipmentType` mutation."""
input UpdateEquipmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EquipmentType` being updated.
  """
  patch: EquipmentTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `EquipmentType` mutation."""
type UpdateEquipmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EquipmentType` that was updated by this mutation."""
  equipmentType: EquipmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  asTiqType: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `EquipmentType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `EquipmentType`."""
  partOf: Thing
}

"""All input for the `updateLedgerEntry` mutation."""
input UpdateLedgerEntryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LedgerEntry` being updated.
  """
  patch: LedgerEntryPatch!
  id: BigInt!
}

"""The output of our update `LedgerEntry` mutation."""
type UpdateLedgerEntryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LedgerEntry` that was updated by this mutation."""
  ledgerEntry: LedgerEntry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  asThing: Thing

  """Reads a single `Account` that is related to this `LedgerEntry`."""
  account: Account

  """Reads a single `Thing` that is related to this `LedgerEntry`."""
  material: Thing

  """Reads a single `Transaction` that is related to this `LedgerEntry`."""
  transaction: Transaction
}

"""All input for the `updateLibrary` mutation."""
input UpdateLibraryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Library` being updated.
  """
  patch: LibraryPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Library` mutation."""
type UpdateLibraryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Library` that was updated by this mutation."""
  library: Library

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Library`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Library`."""
  type: TiqType
}

"""All input for the `updateMeasurementUnit` mutation."""
input UpdateMeasurementUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MeasurementUnit` being updated.
  """
  patch: MeasurementUnitPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `MeasurementUnit` mutation."""
type UpdateMeasurementUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MeasurementUnit` that was updated by this mutation."""
  measurementUnit: MeasurementUnit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  asThing: Thing

  """Reads a single `Quantity` that is related to this `MeasurementUnit`."""
  quantity: Quantity

  """Reads a single `TiqType` that is related to this `MeasurementUnit`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `MeasurementUnit`."""
  partOf: Thing
}

"""All input for the `updateObject` mutation."""
input UpdateObjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Object` being updated.
  """
  patch: ObjectPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Object` mutation."""
type UpdateObjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Object` that was updated by this mutation."""
  object: Object

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Attribute` that is related to this `Object`."""
  referencedByAttribute: Attribute

  """Reads a single `Object` that is related to this `Object`."""
  parentObject: Object

  """Reads a single `Thing` that is related to this `Object`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Object`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Object`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Object`."""
  partOf: Thing
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Organization`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Organization`."""
  asThing: Thing

  """
  Reads a single `TypeToChildType` that is related to this `Organization`.
  """
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Organization`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Organization`."""
  partOf: Thing
}

"""All input for the `updatePlace` mutation."""
input UpdatePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Place` being updated.
  """
  patch: PlacePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Place` mutation."""
type UpdatePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Place` that was updated by this mutation."""
  place: Place

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Place` that is related to this `Place`."""
  parentPlace: Place

  """Reads a single `Organization` that is related to this `Place`."""
  parentOrganization: Organization

  """Reads a single `Thing` that is related to this `Place`."""
  asThing: Thing

  """Reads a single `TypeToChildType` that is related to this `Place`."""
  typeToChildType: TypeToChildType

  """Reads a single `TiqType` that is related to this `Place`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Place`."""
  partOf: Thing
}

"""All input for the `updateQuantity` mutation."""
input UpdateQuantityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Quantity` being updated.
  """
  patch: QuantityPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Quantity` mutation."""
type UpdateQuantityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Quantity` that was updated by this mutation."""
  quantity: Quantity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Quantity`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Quantity`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Quantity`."""
  partOf: Thing
}

"""All input for the `updateRelationship` mutation."""
input UpdateRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Relationship` being updated.
  """
  patch: RelationshipPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Relationship` mutation."""
type UpdateRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Relationship` that was updated by this mutation."""
  relationship: Relationship

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Relationship`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  subject: Thing

  """Reads a single `Thing` that is related to this `Relationship`."""
  object: Thing

  """
  Reads a single `RelationshipType` that is related to this `Relationship`.
  """
  relationshipType: RelationshipType
}

"""All input for the `updateRelationshipType` mutation."""
input UpdateRelationshipTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RelationshipType` being updated.
  """
  patch: RelationshipTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `RelationshipType` mutation."""
type UpdateRelationshipTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelationshipType` that was updated by this mutation."""
  relationshipType: RelationshipType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `RelationshipType`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `RelationshipType`."""
  partOf: Thing
}

"""All input for the `updateScript` mutation."""
input UpdateScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Script` being updated.
  """
  patch: ScriptPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Script` mutation."""
type UpdateScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was updated by this mutation."""
  script: Script

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Library` that is related to this `Script`."""
  onLibrary: Library

  """Reads a single `TiqType` that is related to this `Script`."""
  onType: TiqType

  """Reads a single `Object` that is related to this `Script`."""
  onObject: Object

  """Reads a single `Thing` that is related to this `Script`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `Script`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Script`."""
  partOf: Thing
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CurrentValue` that is related to this `Tag`."""
  currentValue: CurrentValue

  """Reads a single `Connector` that is related to this `Tag`."""
  onConnector: Connector

  """Reads a single `Thing` that is related to this `Tag`."""
  asThing: Thing

  """Reads a single `EnumerationType` that is related to this `Tag`."""
  enumerationType: EnumerationType

  """Reads a single `Thing` that is related to this `Tag`."""
  opcGroup: Thing

  """Reads a single `TiqType` that is related to this `Tag`."""
  type: TiqType

  """Reads a single `Thing` that is related to this `Tag`."""
  partOf: Thing
}

"""All input for the `updateTiqType` mutation."""
input UpdateTiqTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TiqType` being updated.
  """
  patch: TiqTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `TiqType` mutation."""
type UpdateTiqTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TiqType` that was updated by this mutation."""
  tiqType: TiqType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TiqType`."""
  superType: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TiqType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TiqType`."""
  subTypeOf: TiqType

  """Reads a single `Thing` that is related to this `TiqType`."""
  partOf: Thing
}

"""All input for the `updateTransaction` mutation."""
input UpdateTransactionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Transaction` being updated.
  """
  patch: TransactionPatch!
  id: BigInt!
}

"""The output of our update `Transaction` mutation."""
type UpdateTransactionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Transaction` that was updated by this mutation."""
  transaction: Transaction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Thing` that is related to this `Transaction`."""
  asThing: Thing
}

"""All input for the `updateTypeToAttributeType` mutation."""
input UpdateTypeToAttributeTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TypeToAttributeType` being updated.
  """
  patch: TypeToAttributeTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `TypeToAttributeType` mutation."""
type UpdateTypeToAttributeTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToAttributeType` that was updated by this mutation."""
  typeToAttributeType: TypeToAttributeType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `EquipmentType` that is related to this `TypeToAttributeType`.
  """
  equipmentType: EquipmentType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  tiqType: TiqType

  """
  Reads a single `MeasurementUnit` that is related to this `TypeToAttributeType`.
  """
  defaultMeasurementUnit: MeasurementUnit

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  asThing: Thing

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  attributeType: Thing

  """
  Reads a single `EnumerationType` that is related to this `TypeToAttributeType`.
  """
  enumerationType: EnumerationType

  """
  Reads a single `Quantity` that is related to this `TypeToAttributeType`.
  """
  quantity: Quantity

  """
  Reads a single `TypeToAttributeType` that is related to this `TypeToAttributeType`.
  """
  baseTypeToAttributeType: TypeToAttributeType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  type: TiqType

  """
  Reads a single `TiqType` that is related to this `TypeToAttributeType`.
  """
  referencedObjectType: TiqType

  """Reads a single `Thing` that is related to this `TypeToAttributeType`."""
  partOf: Thing
}

"""All input for the `updateTypeToChildType` mutation."""
input UpdateTypeToChildTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TypeToChildType` being updated.
  """
  patch: TypeToChildTypePatch!

  """Internal ID, auto incrementing"""
  id: BigInt!
}

"""The output of our update `TypeToChildType` mutation."""
type UpdateTypeToChildTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TypeToChildType` that was updated by this mutation."""
  typeToChildType: TypeToChildType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  tiqType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  asThing: Thing

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  type: TiqType

  """Reads a single `TiqType` that is related to this `TypeToChildType`."""
  childType: TiqType

  """Reads a single `Thing` that is related to this `TypeToChildType`."""
  partOf: Thing
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

